#usda 1.0
(
    defaultPrim = "japanese_toy"
    doc = """Blender v2.83.4

Generated from Composed Stage of root layer /Users/liu.amy05/Documents/Neural-for-USD/tmp/woodenPlane-orig.usda


Generated from Composed Stage of root layer /Users/liu.amy05/Documents/Neural-for-USD/assets/japanesePlaneToy/japanesePlaneToy.usda
"""
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "_60_cam"
{
    matrix4d xformOp:transform = ( (-8.638860702514648, -2.616973638534546, 0, 0), (0.4431917369365692, -1.463014841079712, 8.972023010253906, 0), (-2.6059391498565674, 8.602434158325195, 1.5314741134643555, 0), (-5.160243034362793, 17.03441619873047, 4.338683128356934, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Camera "Camera_001"
    {
        float2 clippingRange = (0.1, 1000)
        float focalLength = 50
        float horizontalAperture = 36
        float horizontalApertureOffset = 0
        token projection = "perspective"
        float verticalAperture = 20.25
        float verticalApertureOffset = 0
    }
}

def Xform "Signature_Cam"
{
    matrix4d xformOp:transform = ( (0.5684255361557007, 0.8227347135543823, 6.755324761797965e-7, 0), (-0.2876036465167999, 0.19870394468307495, 0.9369102716445923, 0), (0.7708284854888916, -0.5325639247894287, 0.3495699167251587, 0), (1.3370728492736816, -0.8662174940109253, 0.6616774797439575, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Camera "Camera_003"
    {
        float2 clippingRange = (0.1, 1000)
        float focalLength = 50
        float horizontalAperture = 36
        float horizontalApertureOffset = 0
        token projection = "perspective"
        float verticalAperture = 20.25
        float verticalApertureOffset = 0
    }
}

def Xform "cam_target"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1.3060804605484009, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Xform "Camera"
{
    matrix4d xformOp:transform = ( (1, 2.980232238769531e-7, 1.4901161193847656e-7, 0), (-1.4901159772762185e-7, -5.9604641222676946e-8, 0.9999999403953552, 0), (2.682208730675484e-7, -0.9999999403953552, -5.9604641222676946e-8, 0), (-0.0218203067779541, -1.6778227090835571, 0.09268701076507568, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Camera "Camera_002"
    {
        float2 clippingRange = (0.1, 1000)
        float focalLength = 50
        float horizontalAperture = 36
        float horizontalApertureOffset = 0
        token projection = "perspective"
        float verticalAperture = 20.25
        float verticalApertureOffset = 0
    }
}

def Xform "japanese_toy"
{
    float xformOp:rotateX = -90
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.6292068494294654e-7, 1, 0), (0, -1, -1.6292068494294654e-7, 0), (0, 0, 0, 1) )
    double xformOp:translateY = -0.1
    uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:rotateX", "xformOp:translateY"]

    def Mesh "japanese_toy" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [2, 1, 0, 13, 12, 11, 0, 31, 30, 1, 32, 31, 35, 34, 33, 3, 39, 36, 3, 41, 40, 7, 44, 43, 45, 30, 44, 46, 49, 48, 50, 51, 49, 47, 52, 51, 47, 53, 52, 47, 54, 53, 46, 48, 54, 9, 56, 55, 13, 11, 9, 12, 57, 56, 14, 60, 59, 17, 16, 14, 16, 61, 60, 19, 18, 16, 18, 62, 61, 21, 20, 18, 20, 63, 62, 23, 22, 20, 22, 64, 63, 25, 24, 22, 24, 65, 64, 66, 65, 24, 26, 69, 68, 29, 28, 26, 28, 55, 69, 10, 9, 28, 31, 13, 10, 32, 58, 13, 33, 17, 15, 34, 19, 17, 36, 23, 21, 39, 25, 23, 42, 66, 25, 44, 29, 27, 30, 10, 29, 50, 46, 47, 48, 68, 69, 49, 65, 68, 49, 64, 65, 51, 63, 64, 51, 62, 63, 52, 61, 62, 52, 60, 61, 53, 59, 60, 53, 57, 59, 54, 56, 57, 54, 55, 56, 48, 69, 55, 7, 2, 45, 70, 74, 12, 57, 12, 74, 59, 57, 74, 14, 76, 15, 42, 43, 80, 75, 79, 76, 67, 74, 71, 67, 75, 76, 71, 78, 79, 71, 74, 70, 42, 40, 8, 4, 3, 37, 81, 1, 8, 34, 35, 86, 21, 34, 86, 35, 5, 6, 5, 73, 82, 82, 83, 88, 85, 37, 38, 86, 88, 87, 88, 83, 84, 84, 87, 88, 84, 85, 87, 86, 87, 38, 85, 4, 37, 87, 85, 38, 82, 35, 6, 82, 86, 35, 82, 88, 86, 5, 82, 6, 85, 41, 4, 85, 40, 41, 86, 38, 21, 8, 84, 81, 84, 83, 81, 83, 73, 81, 83, 82, 73, 8, 40, 84, 40, 85, 84, 7, 1, 2, 7, 8, 1, 3, 4, 41, 43, 42, 8, 81, 73, 72, 32, 81, 72, 32, 1, 81, 77, 67, 80, 75, 66, 79, 78, 15, 76, 79, 80, 71, 76, 74, 67, 71, 80, 67, 78, 76, 79, 80, 27, 77, 80, 43, 27, 42, 79, 66, 42, 80, 79, 78, 72, 15, 78, 71, 72, 77, 26, 67, 77, 27, 26, 65, 67, 68, 65, 75, 67, 14, 59, 76, 59, 74, 76, 75, 65, 66, 70, 12, 58, 45, 2, 0, 55, 54, 48, 54, 47, 46, 57, 53, 54, 60, 52, 53, 62, 51, 52, 64, 49, 51, 49, 46, 50, 68, 48, 49, 30, 45, 0, 29, 44, 30, 44, 7, 45, 27, 43, 44, 43, 8, 7, 25, 39, 42, 23, 36, 39, 19, 34, 21, 17, 33, 34, 33, 73, 5, 33, 72, 73, 15, 72, 33, 32, 72, 58, 72, 71, 58, 71, 70, 58, 13, 31, 32, 10, 30, 31, 28, 29, 10, 55, 28, 9, 26, 27, 29, 69, 26, 28, 68, 67, 26, 24, 25, 66, 22, 23, 25, 64, 22, 24, 20, 21, 23, 63, 20, 22, 18, 19, 21, 62, 18, 20, 16, 17, 19, 61, 16, 18, 14, 15, 17, 60, 14, 16, 12, 13, 58, 56, 11, 12, 9, 10, 13, 56, 9, 11, 51, 50, 47, 40, 42, 39, 39, 3, 40, 36, 37, 3, 38, 36, 21, 38, 37, 36, 33, 5, 35, 31, 0, 1, 93, 92, 91, 97, 102, 98, 98, 102, 99, 99, 91, 100, 89, 100, 90, 106, 105, 107, 109, 111, 110, 104, 94, 113, 113, 95, 109, 106, 92, 103, 114, 107, 96, 97, 98, 89, 108, 105, 90, 92, 101, 91, 94, 92, 114, 114, 96, 94, 93, 91, 102, 92, 106, 114, 95, 96, 111, 113, 109, 104, 94, 104, 101, 99, 100, 98, 98, 100, 89, 101, 104, 100, 104, 109, 90, 111, 112, 95, 110, 107, 108, 111, 107, 110, 114, 106, 107, 106, 97, 105, 103, 97, 106, 93, 102, 103, 94, 101, 92, 109, 108, 90, 110, 108, 109, 89, 90, 105, 105, 97, 89, 111, 96, 107, 93, 103, 92, 112, 109, 95, 95, 113, 94, 111, 109, 112, 108, 107, 105, 104, 90, 100, 102, 97, 103, 101, 100, 91, 91, 99, 102, 95, 94, 96, 121, 120, 119, 124, 123, 120, 126, 125, 123, 128, 127, 125, 130, 129, 127, 132, 131, 129, 122, 119, 131, 116, 121, 122, 117, 124, 121, 118, 126, 124, 118, 128, 126, 115, 130, 128, 115, 132, 130, 116, 122, 132, 139, 138, 137, 141, 139, 140, 143, 141, 142, 145, 143, 144, 147, 145, 146, 149, 147, 148, 138, 149, 150, 136, 133, 139, 135, 136, 141, 134, 135, 145, 133, 134, 149, 154, 123, 125, 144, 142, 162, 163, 167, 168, 168, 158, 146, 169, 170, 154, 172, 161, 162, 177, 174, 175, 178, 165, 179, 186, 179, 180, 185, 180, 181, 184, 181, 182, 185, 184, 129, 184, 183, 127, 186, 119, 120, 185, 131, 119, 148, 175, 174, 148, 146, 158, 174, 173, 137, 152, 153, 156, 163, 159, 160, 166, 165, 156, 169, 152, 155, 172, 171, 164, 182, 181, 180, 183, 182, 166, 158, 168, 167, 157, 167, 163, 163, 164, 140, 164, 171, 140, 171, 142, 140, 171, 162, 142, 140, 157, 163, 176, 173, 177, 176, 157, 173, 176, 158, 157, 158, 167, 157, 165, 178, 156, 178, 120, 156, 120, 155, 156, 120, 170, 155, 120, 123, 170, 123, 154, 170, 153, 152, 127, 152, 169, 127, 169, 151, 127, 151, 125, 127, 127, 183, 153, 183, 166, 153, 166, 179, 165, 166, 182, 179, 182, 180, 179, 164, 160, 172, 155, 170, 169, 156, 153, 166, 160, 164, 163, 156, 155, 152, 137, 150, 174, 137, 157, 140, 137, 173, 157, 148, 176, 175, 148, 158, 176, 174, 150, 148, 119, 186, 185, 120, 178, 186, 127, 129, 184, 129, 131, 185, 182, 183, 184, 181, 184, 185, 180, 185, 186, 179, 186, 178, 175, 176, 177, 174, 177, 173, 162, 171, 172, 154, 151, 169, 160, 146, 172, 146, 161, 172, 146, 144, 161, 160, 159, 146, 159, 168, 146, 168, 159, 163, 162, 161, 144, 125, 151, 154, 149, 138, 133, 147, 149, 134, 145, 147, 134, 143, 145, 135, 141, 143, 135, 139, 141, 136, 138, 139, 133, 150, 137, 138, 148, 150, 149, 146, 148, 147, 144, 146, 145, 142, 144, 143, 140, 142, 141, 137, 140, 139, 136, 134, 133, 136, 135, 134, 132, 115, 116, 128, 118, 115, 124, 117, 118, 121, 116, 117, 131, 132, 122, 129, 130, 132, 127, 128, 130, 125, 126, 128, 123, 124, 126, 120, 121, 124, 119, 122, 121, 115, 118, 116, 118, 117, 116, 197, 190, 200, 191, 188, 190, 209, 202, 212, 206, 203, 202, 187, 206, 207, 188, 189, 187, 204, 205, 188, 193, 194, 192, 195, 196, 193, 197, 201, 195, 198, 199, 197, 194, 193, 196, 208, 207, 206, 202, 209, 206, 196, 212, 202, 212, 210, 209, 188, 191, 192, 190, 197, 191, 187, 190, 188, 194, 203, 192, 191, 195, 193, 199, 210, 201, 195, 191, 197, 201, 212, 196, 203, 205, 204, 205, 203, 189, 206, 209, 208, 208, 211, 207, 211, 198, 200, 210, 211, 208, 207, 211, 200, 198, 211, 210, 190, 187, 207, 206, 189, 203, 192, 204, 188, 212, 201, 210, 210, 199, 198, 200, 198, 197, 204, 192, 203, 200, 190, 207, 202, 203, 194, 187, 189, 206, 188, 205, 189, 195, 201, 196, 197, 199, 201, 194, 196, 202, 209, 210, 208, 192, 191, 193, 215, 214, 213, 217, 214, 215, 217, 215, 216, 218, 213, 214, 216, 213, 218, 218, 219, 216, 214, 217, 218, 216, 219, 217, 217, 219, 218, 213, 216, 215]
        rel material:binding = </_materials/japanese_toy>
        normal3f[] normals = [(-0.9569714, 0.28961983, 0.018057486), (-0.47414184, 0.30663294, -0.82532763), (-0.4294507, -0.86812764, -0.24885061), (0.028774237, -0.86633015, -0.49864233), (0.15667135, -0.44460046, -0.88192093), (0.17421225, -0.8564272, -0.48598605), (-0.4294507, -0.86812764, -0.24885061), (-0.1048086, -0.8622782, -0.49547106), (-0.1064489, -0.99431807, 0.00031907228), (-0.47414184, 0.30663294, -0.82532763), (-0.09976082, -0.5016731, -0.8592857), (-0.1048086, -0.8622782, -0.49547106), (-0.4136839, 0.87122434, 0.26426068), (-0.08293495, 0.8700882, -0.48586857), (-0.08429013, 0.49340537, -0.8657057), (-0.36001217, 0.52549845, 0.7708714), (-0.08626981, 0.49409312, 0.86511827), (-0.081893004, 0.8686956, 0.48853), (-0.36001217, 0.52549845, 0.7708714), (-0.31990093, -0.55223095, 0.7698729), (-0.44058275, -0.1373156, 0.8871478), (-0.4512413, 0.35625988, 0.8182055), (-0.10531403, -0.8623936, 0.49516284), (-0.10004586, -0.50144887, 0.85938346), (-0.4092858, -0.8035316, 0.43222934), (-0.1064489, -0.99431807, 0.00031907228), (-0.10531403, -0.8623936, 0.49516284), (0.8806909, -0.45295572, 0.1386171), (0.614025, 0.12852883, 0.7787513), (0.6038857, -0.61733496, 0.50420195), (0.8783251, 0.34569713, 0.3302096), (0.60487497, 0.75157565, 0.2631734), (0.614025, 0.12852883, 0.7787513), (0.8850118, 0.14173098, -0.44347095), (0.6079337, 0.6242079, -0.49069455), (0.60487497, 0.75157565, 0.2631734), (0.8850118, 0.14173098, -0.44347095), (0.61473274, -0.14035447, -0.77614707), (0.6079337, 0.6242079, -0.49069455), (0.8850118, 0.14173098, -0.44347095), (0.60374457, -0.74709195, -0.27811173), (0.61473274, -0.14035447, -0.77614707), (0.8806909, -0.45295572, 0.1386171), (0.6038857, -0.61733496, 0.50420195), (0.60374457, -0.74709195, -0.27811173), (0.17954692, -0.98374933, 0.00027277129), (0.37250412, -0.8074245, -0.4575001), (0.37609106, -0.9265682, 0.00516351), (0.028774237, -0.86633015, -0.49864233), (0.17421225, -0.8564272, -0.48598605), (0.17954692, -0.98374933, 0.00027277129), (0.15667135, -0.44460046, -0.88192093), (0.37315607, -0.4826865, -0.7923183), (0.37250412, -0.8074245, -0.4575001), (0.14246006, -0.08210692, -0.98638916), (0.36850548, 0.47248214, -0.80060244), (0.37077323, 0.009464748, -0.9286752), (0.010082637, 0.4894421, -0.8719775), (0.16270354, 0.5008857, -0.850083), (0.14246006, -0.08210692, -0.98638916), (0.16270354, 0.5008857, -0.850083), (0.37087956, 0.8121222, -0.45045057), (0.36850548, 0.47248214, -0.80060244), (0.01905432, 0.86308557, -0.5046981), (0.1758183, 0.856459, -0.48535118), (0.16270354, 0.5008857, -0.850083), (0.1758183, 0.856459, -0.48535118), (0.37609273, 0.9265676, -0.005167669), (0.37087956, 0.8121222, -0.45045057), (0.004189846, 0.9999795, -0.0048537864), (0.17968646, 0.983724, -0.00011641059), (0.1758183, 0.856459, -0.48535118), (0.17968646, 0.983724, -0.00011641059), (0.373661, 0.8077988, 0.45589322), (0.37609273, 0.9265676, -0.005167669), (0.018663876, 0.864896, 0.50160396), (0.17098583, 0.8574111, 0.48539677), (0.17968646, 0.983724, -0.00011641059), (0.17098583, 0.8574111, 0.48539677), (0.3785762, 0.47986796, 0.79145867), (0.373661, 0.8077988, 0.45589322), (0.015171631, 0.48002714, 0.8771224), (0.146942, 0.4799182, 0.86491996), (0.17098583, 0.8574111, 0.48539677), (0.146942, 0.4799182, 0.86491996), (0.3122008, -0.010969693, 0.9499528), (0.3785762, 0.47986796, 0.79145867), (0.019415967, -0.5386266, 0.842321), (0.3122008, -0.010969693, 0.9499528), (0.146942, 0.4799182, 0.86491996), (0.15651906, -0.44441378, 0.8820421), (0.3708539, -0.81214046, 0.45043883), (0.37727332, -0.47623026, 0.7942729), (0.02904308, -0.86615604, 0.49892917), (0.1755899, -0.8565931, 0.48519742), (0.15651906, -0.44441378, 0.8820421), (0.1755899, -0.8565931, 0.48519742), (0.37609106, -0.9265682, 0.00516351), (0.3708539, -0.81214046, 0.45043883), (0.0323678, -0.9994761, -0.00013500518), (0.17954692, -0.98374933, 0.00027277129), (0.1755899, -0.8565931, 0.48519742), (-0.1048086, -0.8622782, -0.49547106), (0.028774237, -0.86633015, -0.49864233), (0.0323678, -0.9994761, -0.00013500518), (-0.09976082, -0.5016731, -0.8592857), (0.0218619, -0.49962357, -0.86596674), (0.028774237, -0.86633015, -0.49864233), (-0.08429013, 0.49340537, -0.8657057), (0.010082637, 0.4894421, -0.8719775), (0.0066663777, -0.5210505, -0.85349977), (-0.08293495, 0.8700882, -0.48586857), (0.01905432, 0.86308557, -0.5046981), (0.010082637, 0.4894421, -0.8719775), (-0.081893004, 0.8686956, 0.48853), (0.018663876, 0.864896, 0.50160396), (0.004189846, 0.9999795, -0.0048537864), (-0.08626981, 0.49409312, 0.86511827), (0.015171631, 0.48002714, 0.8771224), (0.018663876, 0.864896, 0.50160396), (-0.09293607, -0.0046653943, 0.9956611), (0.019415967, -0.5386266, 0.842321), (0.015171631, 0.48002714, 0.8771224), (-0.10531403, -0.8623936, 0.49516284), (0.02904308, -0.86615604, 0.49892917), (0.022175753, -0.49967578, 0.8659286), (-0.1064489, -0.99431807, 0.00031907228), (0.0323678, -0.9994761, -0.00013500518), (0.02904308, -0.86615604, 0.49892917), (0.8783251, 0.34569713, 0.3302096), (0.8806909, -0.45295572, 0.1386171), (0.8850118, 0.14173098, -0.44347095), (0.6038857, -0.61733496, 0.50420195), (0.37727332, -0.47623026, 0.7942729), (0.3708539, -0.81214046, 0.45043883), (0.614025, 0.12852883, 0.7787513), (0.3122008, -0.010969693, 0.9499528), (0.37727332, -0.47623026, 0.7942729), (0.614025, 0.12852883, 0.7787513), (0.3785762, 0.47986796, 0.79145867), (0.3122008, -0.010969693, 0.9499528), (0.60487497, 0.75157565, 0.2631734), (0.373661, 0.8077988, 0.45589322), (0.3785762, 0.47986796, 0.79145867), (0.60487497, 0.75157565, 0.2631734), (0.37609273, 0.9265676, -0.005167669), (0.373661, 0.8077988, 0.45589322), (0.6079337, 0.6242079, -0.49069455), (0.37087956, 0.8121222, -0.45045057), (0.37609273, 0.9265676, -0.005167669), (0.6079337, 0.6242079, -0.49069455), (0.36850548, 0.47248214, -0.80060244), (0.37087956, 0.8121222, -0.45045057), (0.61473274, -0.14035447, -0.77614707), (0.37077323, 0.009464748, -0.9286752), (0.36850548, 0.47248214, -0.80060244), (0.61473274, -0.14035447, -0.77614707), (0.37315607, -0.4826865, -0.7923183), (0.37077323, 0.009464748, -0.9286752), (0.60374457, -0.74709195, -0.27811173), (0.37250412, -0.8074245, -0.4575001), (0.37315607, -0.4826865, -0.7923183), (0.60374457, -0.74709195, -0.27811173), (0.37609106, -0.9265682, 0.00516351), (0.37250412, -0.8074245, -0.4575001), (0.6038857, -0.61733496, 0.50420195), (0.3708539, -0.81214046, 0.45043883), (0.37609106, -0.9265682, 0.00516351), (-0.4512413, 0.35625988, 0.8182055), (-0.9569714, 0.28961983, 0.018057486), (-0.4092858, -0.8035316, 0.43222934), (0.016339233, 0.62993044, -0.7764796), (-0.17201264, 0.0871947, -0.9812282), (0.15667135, -0.44460046, -0.88192093), (0.37315607, -0.4826865, -0.7923183), (0.15667135, -0.44460046, -0.88192093), (-0.17201264, 0.0871947, -0.9812282), (0.37077323, 0.009464748, -0.9286752), (0.37315607, -0.4826865, -0.7923183), (-0.17201264, 0.0871947, -0.9812282), (0.14246006, -0.08210692, -0.98638916), (-0.043960225, -0.5505779, -0.83362556), (0.0066663777, -0.5210505, -0.85349977), (-0.09293607, -0.0046653943, 0.9956611), (-0.10004586, -0.50144887, 0.85938346), (0.33124036, 0.08281786, 0.93990475), (-0.11972698, -0.5659742, 0.815683), (0.19363616, -0.60474044, 0.77252454), (-0.043960225, -0.5505779, -0.83362556), (-0.19180031, 0.04824306, 0.9802475), (-0.17201264, 0.0871947, -0.9812282), (0.33095586, 0.08438942, -0.9398652), (-0.19180031, 0.04824306, 0.9802475), (-0.11972698, -0.5659742, 0.815683), (-0.043960225, -0.5505779, -0.83362556), (0.33095586, 0.08438942, -0.9398652), (0.19132245, -0.65655833, -0.7296073), (0.19363616, -0.60474044, 0.77252454), (0.33095586, 0.08438942, -0.9398652), (-0.17201264, 0.0871947, -0.9812282), (0.016339233, 0.62993044, -0.7764796), (-0.09293607, -0.0046653943, 0.9956611), (-0.44058275, -0.1373156, 0.8871478), (-0.43080604, 0.17786457, 0.8847431), (-0.91740286, -0.2773308, -0.2854114), (-0.36001217, 0.52549845, 0.7708714), (-0.37606576, 0.8385932, -0.39412692), (-0.42286745, 0.12955382, -0.89688295), (-0.47414184, 0.30663294, -0.82532763), (-0.43080604, 0.17786457, 0.8847431), (-0.08293495, 0.8700882, -0.48586857), (-0.4136839, 0.87122434, 0.26426068), (-0.43400154, 0.8687456, 0.2385866), (0.004189846, 0.9999795, -0.0048537864), (-0.08293495, 0.8700882, -0.48586857), (-0.43400154, 0.8687456, 0.2385866), (-0.4136839, 0.87122434, 0.26426068), (-0.34213358, -0.4094513, -0.84575075), (-0.91680455, -0.30729568, 0.2550268), (-0.34213358, -0.4094513, -0.84575075), (-0.4370229, -0.11447501, -0.89213586), (-0.33141404, -0.28000546, 0.90097815), (-0.33141404, -0.28000546, 0.90097815), (-0.91783345, 0.31011474, 0.24781144), (-0.7305652, 0.44210023, 0.5204056), (-0.27446622, -0.31303915, -0.9092166), (-0.37606576, 0.8385932, -0.39412692), (-0.37930942, 0.8654839, -0.3272033), (-0.43400154, 0.8687456, 0.2385866), (-0.7305652, 0.44210023, 0.5204056), (-0.7727721, 0.24774674, -0.584333), (-0.7305652, 0.44210023, 0.5204056), (-0.91783345, 0.31011474, 0.24781144), (-0.8588828, 0.35885406, -0.36543703), (-0.8588828, 0.35885406, -0.36543703), (-0.7727721, 0.24774674, -0.584333), (-0.7305652, 0.44210023, 0.5204056), (-0.8588828, 0.35885406, -0.36543703), (-0.27446622, -0.31303915, -0.9092166), (-0.7727721, 0.24774674, -0.584333), (-0.43400154, 0.8687456, 0.2385866), (-0.7727721, 0.24774674, -0.584333), (-0.37930942, 0.8654839, -0.3272033), (-0.27446622, -0.31303915, -0.9092166), (-0.91740286, -0.2773308, -0.2854114), (-0.37606576, 0.8385932, -0.39412692), (-0.7727721, 0.24774674, -0.584333), (-0.27446622, -0.31303915, -0.9092166), (-0.37930942, 0.8654839, -0.3272033), (-0.33141404, -0.28000546, 0.90097815), (-0.4136839, 0.87122434, 0.26426068), (-0.91680455, -0.30729568, 0.2550268), (-0.33141404, -0.28000546, 0.90097815), (-0.43400154, 0.8687456, 0.2385866), (-0.4136839, 0.87122434, 0.26426068), (-0.33141404, -0.28000546, 0.90097815), (-0.7305652, 0.44210023, 0.5204056), (-0.43400154, 0.8687456, 0.2385866), (-0.34213358, -0.4094513, -0.84575075), (-0.33141404, -0.28000546, 0.90097815), (-0.91680455, -0.30729568, 0.2550268), (-0.27446622, -0.31303915, -0.9092166), (-0.31990093, -0.55223095, 0.7698729), (-0.91740286, -0.2773308, -0.2854114), (-0.27446622, -0.31303915, -0.9092166), (-0.44058275, -0.1373156, 0.8871478), (-0.31990093, -0.55223095, 0.7698729), (-0.43400154, 0.8687456, 0.2385866), (-0.37930942, 0.8654839, -0.3272033), (0.004189846, 0.9999795, -0.0048537864), (-0.43080604, 0.17786457, 0.8847431), (-0.8588828, 0.35885406, -0.36543703), (-0.42286745, 0.12955382, -0.89688295), (-0.8588828, 0.35885406, -0.36543703), (-0.91783345, 0.31011474, 0.24781144), (-0.42286745, 0.12955382, -0.89688295), (-0.91783345, 0.31011474, 0.24781144), (-0.4370229, -0.11447501, -0.89213586), (-0.42286745, 0.12955382, -0.89688295), (-0.91783345, 0.31011474, 0.24781144), (-0.33141404, -0.28000546, 0.90097815), (-0.4370229, -0.11447501, -0.89213586), (-0.43080604, 0.17786457, 0.8847431), (-0.44058275, -0.1373156, 0.8871478), (-0.8588828, 0.35885406, -0.36543703), (-0.44058275, -0.1373156, 0.8871478), (-0.27446622, -0.31303915, -0.9092166), (-0.8588828, 0.35885406, -0.36543703), (-0.4512413, 0.35625988, 0.8182055), (-0.47414184, 0.30663294, -0.82532763), (-0.9569714, 0.28961983, 0.018057486), (-0.4512413, 0.35625988, 0.8182055), (-0.43080604, 0.17786457, 0.8847431), (-0.47414184, 0.30663294, -0.82532763), (-0.36001217, 0.52549845, 0.7708714), (-0.91740286, -0.2773308, -0.2854114), (-0.31990093, -0.55223095, 0.7698729), (-0.10004586, -0.50144887, 0.85938346), (-0.09293607, -0.0046653943, 0.9956611), (-0.43080604, 0.17786457, 0.8847431), (-0.42286745, 0.12955382, -0.89688295), (-0.4370229, -0.11447501, -0.89213586), (-0.09080437, -0.0035913177, -0.99586236), (-0.09976082, -0.5016731, -0.8592857), (-0.42286745, 0.12955382, -0.89688295), (-0.09080437, -0.0035913177, -0.99586236), (-0.09976082, -0.5016731, -0.8592857), (-0.47414184, 0.30663294, -0.82532763), (-0.42286745, 0.12955382, -0.89688295), (0.016332885, 0.63020927, 0.7762535), (-0.19180031, 0.04824306, 0.9802475), (0.33124036, 0.08281786, 0.93990475), (-0.11972698, -0.5659742, 0.815683), (0.019415967, -0.5386266, 0.842321), (0.19363616, -0.60474044, 0.77252454), (0.19132245, -0.65655833, -0.7296073), (0.0066663777, -0.5210505, -0.85349977), (-0.043960225, -0.5505779, -0.83362556), (0.19363616, -0.60474044, 0.77252454), (0.33124036, 0.08281786, 0.93990475), (0.33095586, 0.08438942, -0.9398652), (-0.043960225, -0.5505779, -0.83362556), (-0.17201264, 0.0871947, -0.9812282), (-0.19180031, 0.04824306, 0.9802475), (0.33095586, 0.08438942, -0.9398652), (0.33124036, 0.08281786, 0.93990475), (-0.19180031, 0.04824306, 0.9802475), (0.19132245, -0.65655833, -0.7296073), (-0.043960225, -0.5505779, -0.83362556), (0.19363616, -0.60474044, 0.77252454), (0.33124036, 0.08281786, 0.93990475), (0.022175753, -0.49967578, 0.8659286), (0.016332885, 0.63020927, 0.7762535), (0.33124036, 0.08281786, 0.93990475), (-0.10004586, -0.50144887, 0.85938346), (0.022175753, -0.49967578, 0.8659286), (-0.09293607, -0.0046653943, 0.9956611), (0.19363616, -0.60474044, 0.77252454), (0.019415967, -0.5386266, 0.842321), (-0.09293607, -0.0046653943, 0.9956611), (0.33124036, 0.08281786, 0.93990475), (0.19363616, -0.60474044, 0.77252454), (0.19132245, -0.65655833, -0.7296073), (-0.09080437, -0.0035913177, -0.99586236), (0.0066663777, -0.5210505, -0.85349977), (0.19132245, -0.65655833, -0.7296073), (0.33095586, 0.08438942, -0.9398652), (-0.09080437, -0.0035913177, -0.99586236), (0.016332885, 0.63020927, 0.7762535), (0.15651906, -0.44441378, 0.8820421), (-0.19180031, 0.04824306, 0.9802475), (0.016332885, 0.63020927, 0.7762535), (0.022175753, -0.49967578, 0.8659286), (0.15651906, -0.44441378, 0.8820421), (0.3122008, -0.010969693, 0.9499528), (-0.19180031, 0.04824306, 0.9802475), (0.37727332, -0.47623026, 0.7942729), (0.3122008, -0.010969693, 0.9499528), (-0.11972698, -0.5659742, 0.815683), (-0.19180031, 0.04824306, 0.9802475), (0.14246006, -0.08210692, -0.98638916), (0.37077323, 0.009464748, -0.9286752), (-0.043960225, -0.5505779, -0.83362556), (0.37077323, 0.009464748, -0.9286752), (-0.17201264, 0.0871947, -0.9812282), (-0.043960225, -0.5505779, -0.83362556), (-0.11972698, -0.5659742, 0.815683), (0.3122008, -0.010969693, 0.9499528), (0.019415967, -0.5386266, 0.842321), (0.016339233, 0.62993044, -0.7764796), (0.15667135, -0.44460046, -0.88192093), (0.0218619, -0.49962357, -0.86596674), (-0.4092858, -0.8035316, 0.43222934), (-0.9569714, 0.28961983, 0.018057486), (-0.4294507, -0.86812764, -0.24885061), (0.37609106, -0.9265682, 0.00516351), (0.60374457, -0.74709195, -0.27811173), (0.6038857, -0.61733496, 0.50420195), (0.60374457, -0.74709195, -0.27811173), (0.8850118, 0.14173098, -0.44347095), (0.8806909, -0.45295572, 0.1386171), (0.37315607, -0.4826865, -0.7923183), (0.61473274, -0.14035447, -0.77614707), (0.60374457, -0.74709195, -0.27811173), (0.36850548, 0.47248214, -0.80060244), (0.6079337, 0.6242079, -0.49069455), (0.61473274, -0.14035447, -0.77614707), (0.37609273, 0.9265676, -0.005167669), (0.60487497, 0.75157565, 0.2631734), (0.6079337, 0.6242079, -0.49069455), (0.3785762, 0.47986796, 0.79145867), (0.614025, 0.12852883, 0.7787513), (0.60487497, 0.75157565, 0.2631734), (0.614025, 0.12852883, 0.7787513), (0.8806909, -0.45295572, 0.1386171), (0.8783251, 0.34569713, 0.3302096), (0.37727332, -0.47623026, 0.7942729), (0.6038857, -0.61733496, 0.50420195), (0.614025, 0.12852883, 0.7787513), (-0.1064489, -0.99431807, 0.00031907228), (-0.4092858, -0.8035316, 0.43222934), (-0.4294507, -0.86812764, -0.24885061), (0.02904308, -0.86615604, 0.49892917), (-0.10531403, -0.8623936, 0.49516284), (-0.1064489, -0.99431807, 0.00031907228), (-0.10531403, -0.8623936, 0.49516284), (-0.4512413, 0.35625988, 0.8182055), (-0.4092858, -0.8035316, 0.43222934), (0.022175753, -0.49967578, 0.8659286), (-0.10004586, -0.50144887, 0.85938346), (-0.10531403, -0.8623936, 0.49516284), (-0.10004586, -0.50144887, 0.85938346), (-0.43080604, 0.17786457, 0.8847431), (-0.4512413, 0.35625988, 0.8182055), (0.015171631, 0.48002714, 0.8771224), (-0.08626981, 0.49409312, 0.86511827), (-0.09293607, -0.0046653943, 0.9956611), (0.018663876, 0.864896, 0.50160396), (-0.081893004, 0.8686956, 0.48853), (-0.08626981, 0.49409312, 0.86511827), (0.01905432, 0.86308557, -0.5046981), (-0.08293495, 0.8700882, -0.48586857), (0.004189846, 0.9999795, -0.0048537864), (0.010082637, 0.4894421, -0.8719775), (-0.08429013, 0.49340537, -0.8657057), (-0.08293495, 0.8700882, -0.48586857), (-0.08429013, 0.49340537, -0.8657057), (-0.4370229, -0.11447501, -0.89213586), (-0.34213358, -0.4094513, -0.84575075), (-0.08429013, 0.49340537, -0.8657057), (-0.09080437, -0.0035913177, -0.99586236), (-0.4370229, -0.11447501, -0.89213586), (0.0066663777, -0.5210505, -0.85349977), (-0.09080437, -0.0035913177, -0.99586236), (-0.08429013, 0.49340537, -0.8657057), (-0.09976082, -0.5016731, -0.8592857), (-0.09080437, -0.0035913177, -0.99586236), (0.0218619, -0.49962357, -0.86596674), (-0.09080437, -0.0035913177, -0.99586236), (0.33095586, 0.08438942, -0.9398652), (0.0218619, -0.49962357, -0.86596674), (0.33095586, 0.08438942, -0.9398652), (0.016339233, 0.62993044, -0.7764796), (0.0218619, -0.49962357, -0.86596674), (0.028774237, -0.86633015, -0.49864233), (-0.1048086, -0.8622782, -0.49547106), (-0.09976082, -0.5016731, -0.8592857), (0.0323678, -0.9994761, -0.00013500518), (-0.1064489, -0.99431807, 0.00031907228), (-0.1048086, -0.8622782, -0.49547106), (0.1755899, -0.8565931, 0.48519742), (0.02904308, -0.86615604, 0.49892917), (0.0323678, -0.9994761, -0.00013500518), (0.37609106, -0.9265682, 0.00516351), (0.1755899, -0.8565931, 0.48519742), (0.17954692, -0.98374933, 0.00027277129), (0.15651906, -0.44441378, 0.8820421), (0.022175753, -0.49967578, 0.8659286), (0.02904308, -0.86615604, 0.49892917), (0.3708539, -0.81214046, 0.45043883), (0.15651906, -0.44441378, 0.8820421), (0.1755899, -0.8565931, 0.48519742), (0.37727332, -0.47623026, 0.7942729), (-0.19180031, 0.04824306, 0.9802475), (0.15651906, -0.44441378, 0.8820421), (0.146942, 0.4799182, 0.86491996), (0.015171631, 0.48002714, 0.8771224), (0.019415967, -0.5386266, 0.842321), (0.17098583, 0.8574111, 0.48539677), (0.018663876, 0.864896, 0.50160396), (0.015171631, 0.48002714, 0.8771224), (0.3785762, 0.47986796, 0.79145867), (0.17098583, 0.8574111, 0.48539677), (0.146942, 0.4799182, 0.86491996), (0.17968646, 0.983724, -0.00011641059), (0.004189846, 0.9999795, -0.0048537864), (0.018663876, 0.864896, 0.50160396), (0.373661, 0.8077988, 0.45589322), (0.17968646, 0.983724, -0.00011641059), (0.17098583, 0.8574111, 0.48539677), (0.1758183, 0.856459, -0.48535118), (0.01905432, 0.86308557, -0.5046981), (0.004189846, 0.9999795, -0.0048537864), (0.37609273, 0.9265676, -0.005167669), (0.1758183, 0.856459, -0.48535118), (0.17968646, 0.983724, -0.00011641059), (0.16270354, 0.5008857, -0.850083), (0.010082637, 0.4894421, -0.8719775), (0.01905432, 0.86308557, -0.5046981), (0.37087956, 0.8121222, -0.45045057), (0.16270354, 0.5008857, -0.850083), (0.1758183, 0.856459, -0.48535118), (0.14246006, -0.08210692, -0.98638916), (0.0066663777, -0.5210505, -0.85349977), (0.010082637, 0.4894421, -0.8719775), (0.36850548, 0.47248214, -0.80060244), (0.14246006, -0.08210692, -0.98638916), (0.16270354, 0.5008857, -0.850083), (0.15667135, -0.44460046, -0.88192093), (0.028774237, -0.86633015, -0.49864233), (0.0218619, -0.49962357, -0.86596674), (0.37250412, -0.8074245, -0.4575001), (0.17421225, -0.8564272, -0.48598605), (0.15667135, -0.44460046, -0.88192093), (0.17954692, -0.98374933, 0.00027277129), (0.0323678, -0.9994761, -0.00013500518), (0.028774237, -0.86633015, -0.49864233), (0.37250412, -0.8074245, -0.4575001), (0.17954692, -0.98374933, 0.00027277129), (0.17421225, -0.8564272, -0.48598605), (0.60487497, 0.75157565, 0.2631734), (0.8783251, 0.34569713, 0.3302096), (0.8850118, 0.14173098, -0.44347095), (-0.44058275, -0.1373156, 0.8871478), (-0.09293607, -0.0046653943, 0.9956611), (-0.08626981, 0.49409312, 0.86511827), (-0.08626981, 0.49409312, 0.86511827), (-0.36001217, 0.52549845, 0.7708714), (-0.44058275, -0.1373156, 0.8871478), (-0.081893004, 0.8686956, 0.48853), (-0.37606576, 0.8385932, -0.39412692), (-0.36001217, 0.52549845, 0.7708714), (-0.37930942, 0.8654839, -0.3272033), (-0.081893004, 0.8686956, 0.48853), (0.004189846, 0.9999795, -0.0048537864), (-0.37930942, 0.8654839, -0.3272033), (-0.37606576, 0.8385932, -0.39412692), (-0.081893004, 0.8686956, 0.48853), (-0.08429013, 0.49340537, -0.8657057), (-0.34213358, -0.4094513, -0.84575075), (-0.4136839, 0.87122434, 0.26426068), (-0.1048086, -0.8622782, -0.49547106), (-0.4294507, -0.86812764, -0.24885061), (-0.47414184, 0.30663294, -0.82532763), (0.27656782, -0.675575, -0.68345356), (0.6006492, -0.7960661, -0.074157625), (-0.38110855, -0.6048575, -0.69921637), (0.5543811, 0.74866325, -0.36354473), (-0.2911793, 0.3624588, -0.8853464), (-0.64052904, 0.67754686, -0.36145917), (-0.64052904, 0.67754686, -0.36145917), (-0.2911793, 0.3624588, -0.8853464), (-0.8953743, -0.27931592, -0.34682477), (-0.8953743, -0.27931592, -0.34682477), (-0.38110855, -0.6048575, -0.69921637), (-0.9995426, 0.020488467, -0.022244655), (-0.6328131, 0.7741468, 0.015634228), (-0.9995426, 0.020488467, -0.022244655), (-0.5613039, 0.82740986, -0.01818762), (0.9923897, 0.007976965, -0.12287809), (0.59487045, 0.80155504, -0.060320865), (0.992534, 0.008814323, 0.12165023), (-0.6402088, 0.6777258, 0.36169124), (0.62341464, 0.120281994, 0.77258426), (0.5561753, 0.757474, 0.34190965), (-0.9996694, 0.0045224205, 0.025312146), (-0.55977476, -0.82769877, 0.039584167), (-0.89567566, -0.27595586, 0.34873143), (-0.89567566, -0.27595586, 0.34873143), (-0.38073182, -0.60448974, 0.6997395), (-0.6402088, 0.6777258, 0.36169124), (0.9923897, 0.007976965, -0.12287809), (0.6006492, -0.7960661, -0.074157625), (0.6218502, 0.051137365, -0.7814649), (0.66012746, -0.74811643, 0.067481086), (0.992534, 0.008814323, 0.12165023), (0.30592403, -0.65413785, 0.69174725), (0.5543811, 0.74866325, -0.36354473), (-0.64052904, 0.67754686, -0.36145917), (-0.6328131, 0.7741468, 0.015634228), (0.6482121, 0.75779307, 0.07463777), (0.59487045, 0.80155504, -0.060320865), (-0.5613039, 0.82740986, -0.01818762), (0.6006492, -0.7960661, -0.074157625), (-0.64453566, -0.7638421, -0.033453092), (-0.38110855, -0.6048575, -0.69921637), (-0.55977476, -0.82769877, 0.039584167), (0.6006492, -0.7960661, -0.074157625), (0.66012746, -0.74811643, 0.067481086), (0.66012746, -0.74811643, 0.067481086), (0.30592403, -0.65413785, 0.69174725), (-0.55977476, -0.82769877, 0.039584167), (0.27656782, -0.675575, -0.68345356), (-0.38110855, -0.6048575, -0.69921637), (-0.2911793, 0.3624588, -0.8853464), (0.6006492, -0.7960661, -0.074157625), (0.9923897, 0.007976965, -0.12287809), (0.66012746, -0.74811643, 0.067481086), (-0.38073182, -0.60448974, 0.6997395), (0.30592403, -0.65413785, 0.69174725), (0.62341464, 0.120281994, 0.77258426), (-0.89567566, -0.27595586, 0.34873143), (-0.6402088, 0.6777258, 0.36169124), (-0.9996694, 0.0045224205, 0.025312146), (-0.55977476, -0.82769877, 0.039584167), (-0.9996694, 0.0045224205, 0.025312146), (-0.64453566, -0.7638421, -0.033453092), (-0.8953743, -0.27931592, -0.34682477), (-0.9995426, 0.020488467, -0.022244655), (-0.64052904, 0.67754686, -0.36145917), (-0.64052904, 0.67754686, -0.36145917), (-0.9995426, 0.020488467, -0.022244655), (-0.6328131, 0.7741468, 0.015634228), (-0.64453566, -0.7638421, -0.033453092), (-0.9996694, 0.0045224205, 0.025312146), (-0.9995426, 0.020488467, -0.022244655), (-0.9996694, 0.0045224205, 0.025312146), (-0.6402088, 0.6777258, 0.36169124), (-0.5613039, 0.82740986, -0.01818762), (0.62341464, 0.120281994, 0.77258426), (-0.2907417, 0.3641638, 0.8847903), (-0.38073182, -0.60448974, 0.6997395), (0.5561753, 0.757474, 0.34190965), (0.992534, 0.008814323, 0.12165023), (0.6482121, 0.75779307, 0.07463777), (0.62341464, 0.120281994, 0.77258426), (0.992534, 0.008814323, 0.12165023), (0.5561753, 0.757474, 0.34190965), (0.66012746, -0.74811643, 0.067481086), (0.9923897, 0.007976965, -0.12287809), (0.992534, 0.008814323, 0.12165023), (0.9923897, 0.007976965, -0.12287809), (0.5543811, 0.74866325, -0.36354473), (0.59487045, 0.80155504, -0.060320865), (0.6218502, 0.051137365, -0.7814649), (0.5543811, 0.74866325, -0.36354473), (0.9923897, 0.007976965, -0.12287809), (0.27656782, -0.675575, -0.68345356), (-0.2911793, 0.3624588, -0.8853464), (0.6218502, 0.051137365, -0.7814649), (-0.55977476, -0.82769877, 0.039584167), (-0.64453566, -0.7638421, -0.033453092), (0.6006492, -0.7960661, -0.074157625), (-0.6402088, 0.6777258, 0.36169124), (0.6482121, 0.75779307, 0.07463777), (-0.5613039, 0.82740986, -0.01818762), (0.5561753, 0.757474, 0.34190965), (0.6482121, 0.75779307, 0.07463777), (-0.6402088, 0.6777258, 0.36169124), (-0.6328131, 0.7741468, 0.015634228), (-0.5613039, 0.82740986, -0.01818762), (0.59487045, 0.80155504, -0.060320865), (0.59487045, 0.80155504, -0.060320865), (0.5543811, 0.74866325, -0.36354473), (-0.6328131, 0.7741468, 0.015634228), (0.62341464, 0.120281994, 0.77258426), (0.30592403, -0.65413785, 0.69174725), (0.992534, 0.008814323, 0.12165023), (0.27656782, -0.675575, -0.68345356), (0.6218502, 0.051137365, -0.7814649), (0.6006492, -0.7960661, -0.074157625), (-0.2907417, 0.3641638, 0.8847903), (-0.6402088, 0.6777258, 0.36169124), (-0.38073182, -0.60448974, 0.6997395), (-0.38073182, -0.60448974, 0.6997395), (-0.89567566, -0.27595586, 0.34873143), (-0.55977476, -0.82769877, 0.039584167), (0.62341464, 0.120281994, 0.77258426), (-0.6402088, 0.6777258, 0.36169124), (-0.2907417, 0.3641638, 0.8847903), (0.6482121, 0.75779307, 0.07463777), (0.992534, 0.008814323, 0.12165023), (0.59487045, 0.80155504, -0.060320865), (-0.9996694, 0.0045224205, 0.025312146), (-0.5613039, 0.82740986, -0.01818762), (-0.9995426, 0.020488467, -0.022244655), (-0.2911793, 0.3624588, -0.8853464), (0.5543811, 0.74866325, -0.36354473), (0.6218502, 0.051137365, -0.7814649), (-0.64453566, -0.7638421, -0.033453092), (-0.9995426, 0.020488467, -0.022244655), (-0.38110855, -0.6048575, -0.69921637), (-0.38110855, -0.6048575, -0.69921637), (-0.8953743, -0.27931592, -0.34682477), (-0.2911793, 0.3624588, -0.8853464), (-0.38073182, -0.60448974, 0.6997395), (-0.55977476, -0.82769877, 0.039584167), (0.30592403, -0.65413785, 0.69174725), (0.5368251, 0.16125472, 0.8281399), (0.10798795, 0.23440403, 0.9661228), (0.047273193, -0.61304677, 0.7886311), (0.5702439, 0.73545873, 0.36595404), (0.15081514, 0.8929923, 0.42405125), (0.10798795, 0.23440403, 0.9661228), (0.5675236, 0.7381542, -0.3647537), (0.15082017, 0.8929916, -0.42405105), (0.15081514, 0.8929923, 0.42405125), (0.5419717, 0.15423946, -0.8261216), (0.10798621, 0.23440301, -0.9661232), (0.15082017, 0.8929916, -0.42405105), (0.5038625, -0.5537779, -0.66291225), (0.047273196, -0.61304766, -0.7886303), (0.10798621, 0.23440301, -0.9661232), (0.48990154, -0.8717665, 0.004431698), (0.0174408, -0.9998479, 4.403889e-8), (0.047273196, -0.61304766, -0.7886303), (0.5054676, -0.55982107, 0.6565842), (0.047273193, -0.61304677, 0.7886311), (0.0174408, -0.9998479, 4.403889e-8), (0.92797375, -0.118988976, 0.35313776), (0.5368251, 0.16125472, 0.8281399), (0.5054676, -0.55982107, 0.6565842), (0.8942055, 0.4107, 0.17810704), (0.5702439, 0.73545873, 0.36595404), (0.5368251, 0.16125472, 0.8281399), (0.91408366, 0.28904676, -0.28443447), (0.5675236, 0.7381542, -0.3647537), (0.5702439, 0.73545873, 0.36595404), (0.91408366, 0.28904676, -0.28443447), (0.5419717, 0.15423946, -0.8261216), (0.5675236, 0.7381542, -0.3647537), (0.93501514, -0.2925436, -0.20041227), (0.5038625, -0.5537779, -0.66291225), (0.5419717, 0.15423946, -0.8261216), (0.93501514, -0.2925436, -0.20041227), (0.48990154, -0.8717665, 0.004431698), (0.5038625, -0.5537779, -0.66291225), (0.92797375, -0.118988976, 0.35313776), (0.5054676, -0.55982107, 0.6565842), (0.48990154, -0.8717665, 0.004431698), (0.5368885, 0.16118588, -0.8281122), (0.5054154, -0.55975074, -0.65668446), (0.046981532, -0.61306125, -0.7886372), (0.5702431, 0.73545945, -0.3659541), (0.5368885, 0.16118588, -0.8281122), (0.10798956, 0.23440368, -0.96612275), (0.5675229, 0.73815495, 0.36475334), (0.5702431, 0.73545945, -0.3659541), (0.15081546, 0.8929931, -0.42404965), (0.54201156, 0.15421498, 0.82609993), (0.5675229, 0.73815495, 0.36475334), (0.15082096, 0.892992, 0.42404994), (0.5038626, -0.55374914, 0.66293615), (0.54201156, 0.15421498, 0.82609993), (0.10798633, 0.23440313, 0.9661232), (0.4897771, -0.8718367, -0.004387998), (0.5038626, -0.55374914, 0.66293615), (0.047273856, -0.61304754, 0.78863055), (0.5054154, -0.55975074, -0.65668446), (0.4897771, -0.8718367, -0.004387998), (0.017441582, -0.99984795, 1.651458e-7), (0.89703155, 0.40642557, -0.17364506), (0.93242466, -0.11424969, -0.34282827), (0.5368885, 0.16118588, -0.8281122), (0.91677797, 0.28508943, 0.27971783), (0.89703155, 0.40642557, -0.17364506), (0.5702431, 0.73545945, -0.3659541), (0.9351451, -0.2913052, 0.20160615), (0.91677797, 0.28508943, 0.27971783), (0.54201156, 0.15421498, 0.82609993), (0.93242466, -0.11424969, -0.34282827), (0.9351451, -0.2913052, 0.20160615), (0.4897771, -0.8718367, -0.004387998), (-0.6117057, 0.67717534, 0.40896165), (0.15081514, 0.8929923, 0.42405125), (0.15082017, 0.8929916, -0.42405105), (0.15082096, 0.892992, 0.42404994), (0.15081546, 0.8929931, -0.42404965), (-0.6118224, 0.6771215, -0.40887624), (-0.32069838, 0.87237376, -0.36893976), (-0.7329642, 0.5136455, -0.44601747), (-0.7328943, 0.53504914, 0.42022416), (-0.7328943, 0.53504914, 0.42022416), (-0.65725505, 0.17085591, 0.7340464), (0.10798633, 0.23440313, 0.9661232), (-0.51678646, 0.73224753, -0.44355983), (-0.42519575, 0.6539998, 0.6256939), (-0.6117057, 0.67717534, 0.40896165), (-0.5163336, 0.73257965, 0.44353887), (-0.6884056, 0.68558294, 0.2367989), (-0.6118224, 0.6771215, -0.40887624), (-0.9228127, -0.38516578, 0.007999935), (-0.43158507, -0.9019607, -0.014183948), (-0.37299106, -0.6243847, 0.68630993), (-0.4042807, 0.14866778, 0.9024716), (-0.73097277, 0.4251075, 0.53381866), (-0.90923196, -0.25903377, 0.32588163), (-0.43828744, -0.55919135, 0.70371103), (-0.90923196, -0.25903377, 0.32588163), (-0.9105617, -0.41337338, 0.0000020908715), (-0.44174293, -0.89714175, 9.571913e-7), (-0.9105617, -0.41337338, 0.0000020908715), (-0.909991, -0.25752297, -0.32495892), (-0.43828762, -0.5591907, -0.7037114), (-0.909991, -0.25752297, -0.32495892), (-0.7345719, 0.3138688, -0.60157335), (-0.44174293, -0.89714175, 9.571913e-7), (-0.43828762, -0.5591907, -0.7037114), (0.047273196, -0.61304766, -0.7886303), (-0.43828762, -0.5591907, -0.7037114), (-0.36438164, 0.1474791, -0.91949767), (0.10798621, 0.23440301, -0.9661232), (-0.43828744, -0.55919135, 0.70371103), (0.047273193, -0.61304677, 0.7886311), (0.10798795, 0.23440403, 0.9661228), (-0.44174293, -0.89714175, 9.571913e-7), (0.0174408, -0.9998479, 4.403889e-8), (0.047273193, -0.61304677, 0.7886311), (0.047273856, -0.61304754, 0.78863055), (-0.37299106, -0.6243847, 0.68630993), (-0.43158507, -0.9019607, -0.014183948), (0.047273856, -0.61304754, 0.78863055), (0.10798633, 0.23440313, 0.9661232), (-0.65725505, 0.17085591, 0.7340464), (-0.43158507, -0.9019607, -0.014183948), (-0.6518524, -0.45545536, -0.60634047), (0.046981532, -0.61306125, -0.7886372), (-0.18163297, 0.8561715, -0.48371464), (-0.3174573, 0.8966684, -0.30855554), (-0.3553436, 0.86008596, 0.36603698), (-0.32069838, 0.87237376, -0.36893976), (-0.31747702, 0.89665914, 0.3085625), (-0.18152584, 0.85625845, 0.4836008), (-0.73253155, 0.53544295, -0.42035526), (-0.73097277, 0.4251075, 0.53381866), (-0.3553436, 0.86008596, 0.36603698), (-0.51678646, 0.73224753, -0.44355983), (-0.18163297, 0.8561715, -0.48371464), (-0.18982774, 0.7761662, 0.6012748), (-0.5163336, 0.73257965, 0.44353887), (-0.42526945, 0.6540065, -0.62563676), (-0.18982843, 0.77618396, -0.6012517), (-0.7345719, 0.3138688, -0.60157335), (-0.909991, -0.25752297, -0.32495892), (-0.9105617, -0.41337338, 0.0000020908715), (-0.36438164, 0.1474791, -0.91949767), (-0.7345719, 0.3138688, -0.60157335), (-0.73253155, 0.53544295, -0.42035526), (-0.65725505, 0.17085591, 0.7340464), (-0.7328943, 0.53504914, 0.42022416), (-0.7329642, 0.5136455, -0.44601747), (-0.6614322, 0.16167486, -0.73237187), (-0.7329642, 0.5136455, -0.44601747), (-0.32069838, 0.87237376, -0.36893976), (-0.32069838, 0.87237376, -0.36893976), (-0.18982843, 0.77618396, -0.6012517), (0.10798956, 0.23440368, -0.96612275), (-0.18982843, 0.77618396, -0.6012517), (-0.42526945, 0.6540065, -0.62563676), (0.10798956, 0.23440368, -0.96612275), (-0.42526945, 0.6540065, -0.62563676), (0.15081546, 0.8929931, -0.42404965), (0.10798956, 0.23440368, -0.96612275), (-0.42526945, 0.6540065, -0.62563676), (-0.6118224, 0.6771215, -0.40887624), (0.15081546, 0.8929931, -0.42404965), (0.10798956, 0.23440368, -0.96612275), (-0.6614322, 0.16167486, -0.73237187), (-0.32069838, 0.87237376, -0.36893976), (-0.7405937, -0.27365762, 0.61370397), (-0.6518524, -0.45545536, -0.60634047), (-0.9228127, -0.38516578, 0.007999935), (-0.7405937, -0.27365762, 0.61370397), (-0.6614322, 0.16167486, -0.73237187), (-0.6518524, -0.45545536, -0.60634047), (-0.7405937, -0.27365762, 0.61370397), (-0.65725505, 0.17085591, 0.7340464), (-0.6614322, 0.16167486, -0.73237187), (-0.65725505, 0.17085591, 0.7340464), (-0.7329642, 0.5136455, -0.44601747), (-0.6614322, 0.16167486, -0.73237187), (-0.73097277, 0.4251075, 0.53381866), (-0.4042807, 0.14866778, 0.9024716), (-0.3553436, 0.86008596, 0.36603698), (-0.4042807, 0.14866778, 0.9024716), (0.10798795, 0.23440403, 0.9661228), (-0.3553436, 0.86008596, 0.36603698), (0.10798795, 0.23440403, 0.9661228), (-0.18982774, 0.7761662, 0.6012748), (-0.3553436, 0.86008596, 0.36603698), (0.10798795, 0.23440403, 0.9661228), (-0.42519575, 0.6539998, 0.6256939), (-0.18982774, 0.7761662, 0.6012748), (0.10798795, 0.23440403, 0.9661228), (0.15081514, 0.8929923, 0.42405125), (-0.42519575, 0.6539998, 0.6256939), (0.15081514, 0.8929923, 0.42405125), (-0.6117057, 0.67717534, 0.40896165), (-0.42519575, 0.6539998, 0.6256939), (-0.3174573, 0.8966684, -0.30855554), (-0.18163297, 0.8561715, -0.48371464), (0.10798621, 0.23440301, -0.9661232), (-0.18163297, 0.8561715, -0.48371464), (-0.51678646, 0.73224753, -0.44355983), (0.10798621, 0.23440301, -0.9661232), (-0.51678646, 0.73224753, -0.44355983), (-0.6894455, 0.6846591, -0.23644607), (0.10798621, 0.23440301, -0.9661232), (-0.6894455, 0.6846591, -0.23644607), (0.15082017, 0.8929916, -0.42405105), (0.10798621, 0.23440301, -0.9661232), (0.10798621, 0.23440301, -0.9661232), (-0.36438164, 0.1474791, -0.91949767), (-0.3174573, 0.8966684, -0.30855554), (-0.36438164, 0.1474791, -0.91949767), (-0.73253155, 0.53544295, -0.42035526), (-0.3174573, 0.8966684, -0.30855554), (-0.73253155, 0.53544295, -0.42035526), (-0.90923196, -0.25903377, 0.32588163), (-0.73097277, 0.4251075, 0.53381866), (-0.73253155, 0.53544295, -0.42035526), (-0.7345719, 0.3138688, -0.60157335), (-0.90923196, -0.25903377, 0.32588163), (-0.7345719, 0.3138688, -0.60157335), (-0.9105617, -0.41337338, 0.0000020908715), (-0.90923196, -0.25903377, 0.32588163), (-0.18982843, 0.77618396, -0.6012517), (-0.18152584, 0.85625845, 0.4836008), (-0.5163336, 0.73257965, 0.44353887), (-0.18982774, 0.7761662, 0.6012748), (-0.42519575, 0.6539998, 0.6256939), (-0.51678646, 0.73224753, -0.44355983), (-0.3553436, 0.86008596, 0.36603698), (-0.3174573, 0.8966684, -0.30855554), (-0.73253155, 0.53544295, -0.42035526), (-0.18152584, 0.85625845, 0.4836008), (-0.18982843, 0.77618396, -0.6012517), (-0.32069838, 0.87237376, -0.36893976), (-0.3553436, 0.86008596, 0.36603698), (-0.18982774, 0.7761662, 0.6012748), (-0.18163297, 0.8561715, -0.48371464), (0.046981532, -0.61306125, -0.7886372), (0.017441582, -0.99984795, 1.651458e-7), (-0.43158507, -0.9019607, -0.014183948), (0.046981532, -0.61306125, -0.7886372), (-0.6614322, 0.16167486, -0.73237187), (0.10798956, 0.23440368, -0.96612275), (0.046981532, -0.61306125, -0.7886372), (-0.6518524, -0.45545536, -0.60634047), (-0.6614322, 0.16167486, -0.73237187), (0.047273856, -0.61304754, 0.78863055), (-0.7405937, -0.27365762, 0.61370397), (-0.37299106, -0.6243847, 0.68630993), (0.047273856, -0.61304754, 0.78863055), (-0.65725505, 0.17085591, 0.7340464), (-0.7405937, -0.27365762, 0.61370397), (-0.43158507, -0.9019607, -0.014183948), (0.017441582, -0.99984795, 1.651458e-7), (0.047273856, -0.61304754, 0.78863055), (0.047273193, -0.61304677, 0.7886311), (-0.43828744, -0.55919135, 0.70371103), (-0.44174293, -0.89714175, 9.571913e-7), (0.10798795, 0.23440403, 0.9661228), (-0.4042807, 0.14866778, 0.9024716), (-0.43828744, -0.55919135, 0.70371103), (0.10798621, 0.23440301, -0.9661232), (0.047273196, -0.61304766, -0.7886303), (-0.43828762, -0.5591907, -0.7037114), (0.047273196, -0.61304766, -0.7886303), (0.0174408, -0.9998479, 4.403889e-8), (-0.44174293, -0.89714175, 9.571913e-7), (-0.7345719, 0.3138688, -0.60157335), (-0.36438164, 0.1474791, -0.91949767), (-0.43828762, -0.5591907, -0.7037114), (-0.909991, -0.25752297, -0.32495892), (-0.43828762, -0.5591907, -0.7037114), (-0.44174293, -0.89714175, 9.571913e-7), (-0.9105617, -0.41337338, 0.0000020908715), (-0.44174293, -0.89714175, 9.571913e-7), (-0.43828744, -0.55919135, 0.70371103), (-0.90923196, -0.25903377, 0.32588163), (-0.43828744, -0.55919135, 0.70371103), (-0.4042807, 0.14866778, 0.9024716), (-0.37299106, -0.6243847, 0.68630993), (-0.7405937, -0.27365762, 0.61370397), (-0.9228127, -0.38516578, 0.007999935), (-0.43158507, -0.9019607, -0.014183948), (-0.9228127, -0.38516578, 0.007999935), (-0.6518524, -0.45545536, -0.60634047), (-0.6118224, 0.6771215, -0.40887624), (-0.42526945, 0.6540065, -0.62563676), (-0.5163336, 0.73257965, 0.44353887), (-0.6117057, 0.67717534, 0.40896165), (-0.6894455, 0.6846591, -0.23644607), (-0.51678646, 0.73224753, -0.44355983), (-0.18152584, 0.85625845, 0.4836008), (0.10798633, 0.23440313, 0.9661232), (-0.5163336, 0.73257965, 0.44353887), (0.10798633, 0.23440313, 0.9661232), (-0.6884056, 0.68558294, 0.2367989), (-0.5163336, 0.73257965, 0.44353887), (0.10798633, 0.23440313, 0.9661232), (0.15082096, 0.892992, 0.42404994), (-0.6884056, 0.68558294, 0.2367989), (-0.18152584, 0.85625845, 0.4836008), (-0.31747702, 0.89665914, 0.3085625), (0.10798633, 0.23440313, 0.9661232), (-0.31747702, 0.89665914, 0.3085625), (-0.7328943, 0.53504914, 0.42022416), (0.10798633, 0.23440313, 0.9661232), (-0.7328943, 0.53504914, 0.42022416), (-0.31747702, 0.89665914, 0.3085625), (-0.32069838, 0.87237376, -0.36893976), (-0.6118224, 0.6771215, -0.40887624), (-0.6884056, 0.68558294, 0.2367989), (0.15082096, 0.892992, 0.42404994), (0.15082017, 0.8929916, -0.42405105), (-0.6894455, 0.6846591, -0.23644607), (-0.6117057, 0.67717534, 0.40896165), (0.4897771, -0.8718367, -0.004387998), (0.5054154, -0.55975074, -0.65668446), (0.93242466, -0.11424969, -0.34282827), (0.5038626, -0.55374914, 0.66293615), (0.4897771, -0.8718367, -0.004387998), (0.9351451, -0.2913052, 0.20160615), (0.54201156, 0.15421498, 0.82609993), (0.5038626, -0.55374914, 0.66293615), (0.9351451, -0.2913052, 0.20160615), (0.5675229, 0.73815495, 0.36475334), (0.54201156, 0.15421498, 0.82609993), (0.91677797, 0.28508943, 0.27971783), (0.5702431, 0.73545945, -0.3659541), (0.5675229, 0.73815495, 0.36475334), (0.91677797, 0.28508943, 0.27971783), (0.5368885, 0.16118588, -0.8281122), (0.5702431, 0.73545945, -0.3659541), (0.89703155, 0.40642557, -0.17364506), (0.5054154, -0.55975074, -0.65668446), (0.5368885, 0.16118588, -0.8281122), (0.93242466, -0.11424969, -0.34282827), (0.017441582, -0.99984795, 1.651458e-7), (0.046981532, -0.61306125, -0.7886372), (0.5054154, -0.55975074, -0.65668446), (0.047273856, -0.61304754, 0.78863055), (0.017441582, -0.99984795, 1.651458e-7), (0.4897771, -0.8718367, -0.004387998), (0.10798633, 0.23440313, 0.9661232), (0.047273856, -0.61304754, 0.78863055), (0.5038626, -0.55374914, 0.66293615), (0.15082096, 0.892992, 0.42404994), (0.10798633, 0.23440313, 0.9661232), (0.54201156, 0.15421498, 0.82609993), (0.15081546, 0.8929931, -0.42404965), (0.15082096, 0.892992, 0.42404994), (0.5675229, 0.73815495, 0.36475334), (0.10798956, 0.23440368, -0.96612275), (0.15081546, 0.8929931, -0.42404965), (0.5702431, 0.73545945, -0.3659541), (0.046981532, -0.61306125, -0.7886372), (0.10798956, 0.23440368, -0.96612275), (0.5368885, 0.16118588, -0.8281122), (0.89703155, 0.40642557, -0.17364506), (0.9351451, -0.2913052, 0.20160615), (0.93242466, -0.11424969, -0.34282827), (0.89703155, 0.40642557, -0.17364506), (0.91677797, 0.28508943, 0.27971783), (0.9351451, -0.2913052, 0.20160615), (0.48990154, -0.8717665, 0.004431698), (0.93501514, -0.2925436, -0.20041227), (0.92797375, -0.118988976, 0.35313776), (0.5419717, 0.15423946, -0.8261216), (0.91408366, 0.28904676, -0.28443447), (0.93501514, -0.2925436, -0.20041227), (0.5702439, 0.73545873, 0.36595404), (0.8942055, 0.4107, 0.17810704), (0.91408366, 0.28904676, -0.28443447), (0.5368251, 0.16125472, 0.8281399), (0.92797375, -0.118988976, 0.35313776), (0.8942055, 0.4107, 0.17810704), (0.0174408, -0.9998479, 4.403889e-8), (0.48990154, -0.8717665, 0.004431698), (0.5054676, -0.55982107, 0.6565842), (0.047273196, -0.61304766, -0.7886303), (0.5038625, -0.5537779, -0.66291225), (0.48990154, -0.8717665, 0.004431698), (0.10798621, 0.23440301, -0.9661232), (0.5419717, 0.15423946, -0.8261216), (0.5038625, -0.5537779, -0.66291225), (0.15082017, 0.8929916, -0.42405105), (0.5675236, 0.7381542, -0.3647537), (0.5419717, 0.15423946, -0.8261216), (0.15081514, 0.8929923, 0.42405125), (0.5702439, 0.73545873, 0.36595404), (0.5675236, 0.7381542, -0.3647537), (0.10798795, 0.23440403, 0.9661228), (0.5368251, 0.16125472, 0.8281399), (0.5702439, 0.73545873, 0.36595404), (0.047273193, -0.61304677, 0.7886311), (0.5054676, -0.55982107, 0.6565842), (0.5368251, 0.16125472, 0.8281399), (0.93501514, -0.2925436, -0.20041227), (0.91408366, 0.28904676, -0.28443447), (0.92797375, -0.118988976, 0.35313776), (0.91408366, 0.28904676, -0.28443447), (0.8942055, 0.4107, 0.17810704), (0.92797375, -0.118988976, 0.35313776), (0.7140483, -0.68057936, -0.16415448), (-0.44697076, -0.8914509, -0.07438102), (0.37178072, -0.8113248, -0.4511444), (0.47501987, -0.8634841, 0.16956207), (-0.6911188, -0.7191957, 0.071502216), (-0.44697076, -0.8914509, -0.07438102), (-0.35778916, 0.92589545, 0.12126256), (0.015497172, 0.9991665, -0.037764348), (0.45911953, 0.8867881, -0.05306821), (-0.8463009, 0.5286566, 0.065551005), (-0.24548617, 0.7056198, 0.6647083), (0.015497172, 0.9991665, -0.037764348), (-0.927427, -0.37207943, -0.03789551), (-0.8463009, 0.5286566, 0.065551005), (-0.6820801, -0.595038, -0.425084), (-0.6911188, -0.7191957, 0.071502216), (-0.9349564, 0.3534672, 0.030286023), (-0.927427, -0.37207943, -0.03789551), (-0.676951, -0.29144785, 0.6758664), (-0.8574243, 0.37219772, 0.35537654), (-0.6911188, -0.7191957, 0.071502216), (0.49911916, -0.48161685, 0.72036475), (0.45968106, 0.67917746, 0.57219875), (-0.19878498, -0.688693, 0.69727075), (0.9366941, -0.30698323, 0.16842039), (0.7332671, 0.6676792, 0.1285453), (0.49911916, -0.48161685, 0.72036475), (0.7140483, -0.68057936, -0.16415448), (0.9336015, 0.3032943, -0.19079015), (0.9366941, -0.30698323, 0.16842039), (0.56324357, -0.2550751, -0.7859348), (0.73048633, 0.43283358, -0.5282468), (0.7140483, -0.68057936, -0.16415448), (0.45968106, 0.67917746, 0.57219875), (0.49911916, -0.48161685, 0.72036475), (0.7332671, 0.6676792, 0.1285453), (-0.6062648, 0.70841235, -0.36137906), (-0.6820801, -0.595038, -0.425084), (-0.8463009, 0.5286566, 0.065551005), (0.015497172, 0.9991665, -0.037764348), (-0.35778916, 0.92589545, 0.12126256), (-0.8463009, 0.5286566, 0.065551005), (0.7332671, 0.6676792, 0.1285453), (0.45911953, 0.8867881, -0.05306821), (0.015497172, 0.9991665, -0.037764348), (0.45911953, 0.8867881, -0.05306821), (0.17422312, 0.7402897, -0.6493207), (-0.35778916, 0.92589545, 0.12126256), (-0.6911188, -0.7191957, 0.071502216), (0.47501987, -0.8634841, 0.16956207), (-0.19878498, -0.688693, 0.69727075), (-0.44697076, -0.8914509, -0.07438102), (0.7140483, -0.68057936, -0.16415448), (0.47501987, -0.8634841, 0.16956207), (-0.927427, -0.37207943, -0.03789551), (-0.44697076, -0.8914509, -0.07438102), (-0.6911188, -0.7191957, 0.071502216), (0.45968106, 0.67917746, 0.57219875), (-0.24548617, 0.7056198, 0.6647083), (-0.19878498, -0.688693, 0.69727075), (0.47501987, -0.8634841, 0.16956207), (0.9366941, -0.30698323, 0.16842039), (0.49911916, -0.48161685, 0.72036475), (0.73048633, 0.43283358, -0.5282468), (0.17422312, 0.7402897, -0.6493207), (0.9336015, 0.3032943, -0.19079015), (0.9366941, -0.30698323, 0.16842039), (0.47501987, -0.8634841, 0.16956207), (0.7140483, -0.68057936, -0.16415448), (0.9336015, 0.3032943, -0.19079015), (0.45911953, 0.8867881, -0.05306821), (0.7332671, 0.6676792, 0.1285453), (-0.24548617, 0.7056198, 0.6647083), (-0.8574243, 0.37219772, 0.35537654), (-0.676951, -0.29144785, 0.6758664), (-0.8574243, 0.37219772, 0.35537654), (-0.24548617, 0.7056198, 0.6647083), (-0.9349564, 0.3534672, 0.030286023), (-0.8463009, 0.5286566, 0.065551005), (-0.35778916, 0.92589545, 0.12126256), (-0.6062648, 0.70841235, -0.36137906), (-0.6062648, 0.70841235, -0.36137906), (-0.35158426, -0.20620218, -0.91316444), (-0.6820801, -0.595038, -0.425084), (-0.35158426, -0.20620218, -0.91316444), (0.56324357, -0.2550751, -0.7859348), (0.37178072, -0.8113248, -0.4511444), (0.17422312, 0.7402897, -0.6493207), (-0.35158426, -0.20620218, -0.91316444), (-0.6062648, 0.70841235, -0.36137906), (-0.6820801, -0.595038, -0.425084), (-0.35158426, -0.20620218, -0.91316444), (0.37178072, -0.8113248, -0.4511444), (0.56324357, -0.2550751, -0.7859348), (-0.35158426, -0.20620218, -0.91316444), (0.17422312, 0.7402897, -0.6493207), (-0.44697076, -0.8914509, -0.07438102), (-0.927427, -0.37207943, -0.03789551), (-0.6820801, -0.595038, -0.425084), (-0.8463009, 0.5286566, 0.065551005), (-0.9349564, 0.3534672, 0.030286023), (-0.24548617, 0.7056198, 0.6647083), (-0.19878498, -0.688693, 0.69727075), (-0.676951, -0.29144785, 0.6758664), (-0.6911188, -0.7191957, 0.071502216), (0.45911953, 0.8867881, -0.05306821), (0.9336015, 0.3032943, -0.19079015), (0.17422312, 0.7402897, -0.6493207), (0.17422312, 0.7402897, -0.6493207), (0.73048633, 0.43283358, -0.5282468), (0.56324357, -0.2550751, -0.7859348), (0.37178072, -0.8113248, -0.4511444), (0.56324357, -0.2550751, -0.7859348), (0.7140483, -0.68057936, -0.16415448), (-0.676951, -0.29144785, 0.6758664), (-0.19878498, -0.688693, 0.69727075), (-0.24548617, 0.7056198, 0.6647083), (0.37178072, -0.8113248, -0.4511444), (-0.44697076, -0.8914509, -0.07438102), (-0.6820801, -0.595038, -0.425084), (0.015497172, 0.9991665, -0.037764348), (-0.24548617, 0.7056198, 0.6647083), (0.45968106, 0.67917746, 0.57219875), (-0.927427, -0.37207943, -0.03789551), (-0.9349564, 0.3534672, 0.030286023), (-0.8463009, 0.5286566, 0.065551005), (-0.6911188, -0.7191957, 0.071502216), (-0.8574243, 0.37219772, 0.35537654), (-0.9349564, 0.3534672, 0.030286023), (0.9366941, -0.30698323, 0.16842039), (0.9336015, 0.3032943, -0.19079015), (0.7332671, 0.6676792, 0.1285453), (0.7140483, -0.68057936, -0.16415448), (0.73048633, 0.43283358, -0.5282468), (0.9336015, 0.3032943, -0.19079015), (0.45968106, 0.67917746, 0.57219875), (0.7332671, 0.6676792, 0.1285453), (0.015497172, 0.9991665, -0.037764348), (-0.35778916, 0.92589545, 0.12126256), (0.17422312, 0.7402897, -0.6493207), (-0.6062648, 0.70841235, -0.36137906), (-0.19878498, -0.688693, 0.69727075), (0.47501987, -0.8634841, 0.16956207), (0.49911916, -0.48161685, 0.72036475), (-0.6140657, 0.562784, -0.5533511), (0.52941936, 0.6806062, -0.5064488), (0.70336807, -0.47693142, -0.52707666), (-0.22342068, 0.7235577, 0.6531061), (0.52941936, 0.6806062, -0.5064488), (-0.6140657, 0.562784, -0.5533511), (-0.22342068, 0.7235577, 0.6531061), (-0.6140657, 0.562784, -0.5533511), (-0.6173302, -0.5856321, -0.5252984), (0.73577356, -0.35585672, 0.5761972), (0.70336807, -0.47693142, -0.52707666), (0.52941936, 0.6806062, -0.5064488), (-0.6173302, -0.5856321, -0.5252984), (0.70336807, -0.47693142, -0.52707666), (0.73577356, -0.35585672, 0.5761972), (0.73577356, -0.35585672, 0.5761972), (-0.6277985, -0.48458925, 0.60913247), (-0.6173302, -0.5856321, -0.5252984), (0.52941936, 0.6806062, -0.5064488), (-0.22342068, 0.7235577, 0.6531061), (0.73577356, -0.35585672, 0.5761972), (-0.6173302, -0.5856321, -0.5252984), (-0.6277985, -0.48458925, 0.60913247), (-0.22342068, 0.7235577, 0.6531061), (-0.22342068, 0.7235577, 0.6531061), (-0.6277985, -0.48458925, 0.60913247), (0.73577356, -0.35585672, 0.5761972), (0.70336807, -0.47693142, -0.52707666), (-0.6173302, -0.5856321, -0.5252984), (-0.6140657, 0.562784, -0.5533511)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-0.44544858, 0.082658194, -0.0069858637), (-0.4445023, 0.096637726, -0.025177361), (-0.4631186, 0.09685016, 0.0010659909), (-0.44412625, 0.12450552, 0.02486462), (-0.4700895, 0.115949005, 0.0047918586), (-0.44470423, 0.11646881, -0.027198406), (-0.45967567, 0.11609587, -0.014466844), (-0.44451755, 0.09664087, 0.025166612), (-0.33328295, 0.09761071, 0.04195554), (0.31933594, 0.008298442, 0.00003845431), (0.23881724, 0, 0.000031242147), (0.31964907, 0.020191431, -0.044951405), (0.32031363, 0.05258531, -0.07777982), (0.23865989, 0.012925252, -0.048297785), (0.31998527, 0.096726365, -0.08985954), (0.23768534, 0.08918008, -0.096563146), (0.32040858, 0.1408926, -0.07771318), (0.23925576, 0.14512444, -0.083723925), (0.31998634, 0.17319313, -0.04489017), (0.23909786, 0.18047976, -0.048327878), (0.3193354, 0.18511915, -0.000038519036), (0.22991246, 0.19423795, -0.0008464777), (0.31900233, 0.17336255, 0.044931017), (0.23871654, 0.18048659, 0.048296604), (0.31928504, 0.14095502, 0.07788286), (0.23882931, 0.14508876, 0.0837333), (0.32040125, 0.052572727, 0.07776406), (0.23923424, 0.048317283, 0.08374287), (0.31998634, 0.02022396, 0.04489004), (0.23912777, 0.012940988, 0.04832755), (-0.056465447, 0.01078783, -4.2561442e-7), (-0.056453392, 0.021612883, -0.040400203), (-0.056416154, 0.051186934, -0.069975056), (-0.05630128, 0.13198781, -0.06997577), (-0.056274533, 0.16156135, -0.040400926), (-0.44406015, 0.13456005, -0.014880559), (-0.056260362, 0.1615624, 0.040400796), (-0.4479012, 0.1369676, 0.0055347113), (-0.34084076, 0.14716691, 0.0038896175), (-0.056298137, 0.13198677, 0.06997623), (-0.33286753, 0.11684856, 0.03997364), (-0.44413358, 0.11605811, 0.027123269), (-0.056356877, 0.09158711, 0.08080077), (-0.056414053, 0.051187992, 0.06997532), (-0.056448147, 0.021612361, 0.040399745), (-0.44412678, 0.08528499, 0.014355779), (0.47304624, 0.088559575, 0.0029005026), (0.47296757, 0.09932222, -0.008671608), (0.44353354, 0.071048446, 0.022269553), (0.4431134, 0.102224395, 0.034644768), (0.4729707, 0.10234241, 0.0063326387), (0.44365838, 0.1279296, 0.012124859), (0.44353354, 0.12236862, -0.022269811), (0.44311288, 0.09119267, -0.034645226), (0.4436589, 0.065487996, -0.012124857), (0.3703802, 0.022225007, 0.0000627134), (0.37056902, 0.032317296, -0.039211772), (0.37058896, 0.059617564, -0.06786746), (0.23896989, 0.048354, -0.08375228), (0.3704788, 0.096708536, -0.078368925), (0.37039644, 0.13389602, -0.06793778), (0.37029153, 0.16119157, -0.039342772), (0.3703802, 0.17119208, -0.000062843785), (0.37056953, 0.16109978, 0.039211836), (0.3706388, 0.13378796, 0.067850746), (0.36296976, 0.096082255, 0.081805356), (0.239903, 0.08867812, 0.095553376), (0.3527138, 0.069416136, 0.07531736), (0.3704279, 0.059514232, 0.06791578), (0.37029153, 0.032225505, 0.039342772), (0.23901656, 0.07055697, -0.089703724), (0.12352703, 0.06974501, -0.08376274), (-0.05636108, 0.09158554, -0.080800734), (-0.3290726, 0.11602611, -0.041115455), (0.35251814, 0.06944866, -0.07536129), (0.35150427, 0.08644156, 0.08068341), (0.35207862, 0.086384915, -0.08042902), (0.23909368, 0.07055749, 0.08970753), (0.123675466, 0.086668156, -0.08823762), (0.123614624, 0.08671379, 0.08825756), (0.12357266, 0.0697597, 0.08377743), (-0.32904112, 0.09717798, -0.04284231), (-0.3290726, 0.116020866, -0.014511558), (-0.3290726, 0.10491099, -0.013742546), (-0.3290726, 0.10745597, 0.005584672), (-0.3290726, 0.1160151, 0.0047179013), (-0.33979538, 0.14383464, -0.015094105), (-0.31431836, 0.10943866, 0.0051590893), (-0.31445107, 0.105708785, -0.0139119), (0.12455666, 0.0859055, -0.074100375), (0.1263049, 0.08582315, 0.072363526), (0.14840978, 0.10212526, -0.54999995), (0.351606, 0.069182724, -0.064859204), (0.23538269, 0.102125786, -0.54999995), (0.12594612, 0.069254056, 0.06646384), (0.14840925, 0.102124736, 0.54999995), (0.23538269, 0.102125786, 0.5499997), (0.24326204, 0.11834397, -0.5426196), (0.14190048, 0.11834397, -0.5426196), (0.14189628, 0.10794062, -0.54333353), (0.12254985, 0.0775803, -0.06993397), (0.12385014, 0.06940302, -0.06449486), (0.14840925, 0.11252546, -0.54928637), (0.24221876, 0.11047563, -0.5499506), (0.12279689, 0.077574536, 0.06988392), (0.35033143, 0.08568363, -0.07342739), (0.35395378, 0.07754674, -0.06975849), (0.3542407, 0.077531524, 0.06973449), (0.3515205, 0.085830495, 0.0747596), (0.14190048, 0.11834397, 0.5426196), (0.24326204, 0.11834397, 0.5426196), (0.24228957, 0.111932226, 0.54949725), (0.14840925, 0.11252546, 0.54928637), (0.14189628, 0.10794062, 0.5433334), (0.35320002, 0.06935424, 0.06366894), (0.36259788, 0.050764695, -0.3051748), (0.36257166, 0.055854127, -0.29146525), (0.3623529, 0.066665545, -0.2963332), (0.3626351, 0.06505737, -0.30656582), (0.3151508, 0.029066846, -0.26336327), (0.3151508, 0.06900019, -0.2542488), (0.33875158, 0.063949056, -0.2611481), (0.33875158, 0.030002594, -0.26889604), (0.3151508, 0.10102429, -0.27978706), (0.33875158, 0.09117169, -0.28285748), (0.3151508, 0.10102429, -0.3207472), (0.33875158, 0.09117169, -0.31767678), (0.3151508, 0.06900019, -0.34628543), (0.33875158, 0.063949056, -0.33938625), (0.3151508, 0.029066846, -0.33717096), (0.33875158, 0.030002594, -0.33163825), (0.3151508, 0.0112950355, -0.3002671), (0.33875158, 0.01489535, -0.30026716), (0.36271012, 0.055930182, 0.29164803), (0.36255068, 0.050701752, 0.30520985), (0.3626351, 0.06505737, 0.30656585), (0.3623529, 0.066665545, 0.29633316), (0.3151508, 0.029066846, 0.26336324), (0.33875158, 0.030002594, 0.268896), (0.33875158, 0.063949056, 0.26114804), (0.3151508, 0.06900019, 0.25424877), (0.33875158, 0.09117169, 0.28285745), (0.3151508, 0.10102429, 0.27978703), (0.33875158, 0.09117169, 0.31767672), (0.3151508, 0.10102429, 0.32074714), (0.33875158, 0.063949056, 0.33938622), (0.3151508, 0.06900019, 0.3462854), (0.33875158, 0.030002594, 0.33163816), (0.3151508, 0.029066846, 0.33717093), (0.33875158, 0.01489535, 0.30026707), (0.3151508, 0.0112950355, 0.30026707), (0.2952578, 0.09952993, -0.31988052), (0.2868775, 0.086967655, -0.32903138), (0.14138329, 0.08598785, -0.31475794), (0.30447626, 0.1002223, -0.28025213), (0.30143034, 0.08268285, -0.26658016), (0.14138433, 0.08388557, -0.28409967), (0.13512576, 0.06774029, 0.27187148), (0.13512576, 0.06774029, 0.3286626), (0.14138329, 0.08598785, 0.3147581), (0.2868775, 0.086967655, 0.3290313), (0.29528508, 0.09953203, 0.31988168), (0.3044768, 0.1002223, 0.280252), (0.14138433, 0.08388557, 0.28409937), (0.30143034, 0.08268285, 0.2665801), (0.13459074, 0.07494039, -0.27721885), (0.13512576, 0.079998344, -0.31888717), (0.13512576, 0.07729497, 0.27949134), (0.13512576, 0.07999782, 0.3188873), (0.29415473, 0.092960835, -0.32500488), (0.3066824, 0.089276075, -0.27129453), (0.3066824, 0.089276075, 0.2712944), (0.29416785, 0.092960835, 0.3250061), (0.13612655, 0.045531556, 0.27684408), (0.13960202, 0.031614974, 0.30026707), (0.13960202, 0.042750545, 0.32338992), (0.13512576, 0.048711725, 0.3243195), (0.13512576, 0.03712873, 0.30026707), (0.13960412, 0.06777124, -0.27143314), (0.13512576, 0.046213955, -0.28140116), (0.13512576, 0.03712873, -0.3002671), (0.13512576, 0.046213955, -0.31913304), (0.13512576, 0.07224068, -0.3250735), (0.13960412, 0.06777124, -0.3291011), (0.13960412, 0.042750545, -0.32339016), (0.13960412, 0.031614974, -0.3002671), (0.13960412, 0.042750545, -0.27714407), (-0.4727981, 0.10018349, -0.040129226), (-0.47203493, 0.098296255, 0.026085045), (-0.47304624, 0.11212787, 0.022306269), (-0.46960747, 0.09704685, -0.04734696), (-0.33259583, 0.09711661, 0.02862563), (-0.44454062, 0.11763796, 0.2781801), (-0.43270952, 0.118457794, 0.2778682), (-0.43444198, 0.13505888, 0.27592885), (-0.3292483, 0.10059103, 0.025948737), (-0.32986987, 0.11430149, 0.025089966), (-0.32988298, 0.09874263, -0.045739632), (-0.43290675, 0.12133321, -0.2976263), (-0.4312094, 0.13225321, -0.29506588), (-0.43368304, 0.116633505, -0.29427838), (-0.32943085, 0.11168308, -0.046394035), (-0.3943634, 0.116110034, 0.026813738), (-0.4457879, 0.13528076, 0.27817464), (-0.44917315, 0.121610165, 0.27823472), (-0.44939607, 0.13208169, 0.27603787), (-0.47287732, 0.112988085, -0.042157218), (-0.449394, 0.118136786, -0.2958539), (-0.44834918, 0.13524036, -0.29365715), (-0.46925658, 0.11608696, -0.045836862), (-0.43691248, 0.13525453, -0.29739347), (-0.4463691, 0.1216044, -0.30002853), (-0.33287328, 0.11608958, -0.04441856), (-0.3250852, 0.116211794, -0.0138643), (-0.42918944, 0.30043614, -0.018144127), (-0.4466219, 0.30043614, -0.018144127), (-0.46994895, 0.11587191, -0.013680061), (-0.44187397, 0.30267268, 0.0010680235), (-0.32473168, 0.11882706, 0.005281237), (-0.46980995, 0.11845412, 0.005489406)]
        texCoord2f[] primvars:st = [(0.38756585, 0.20549333), (0.3866927, 0.18585372), (0.38891035, 0.20045233), (0.88401145, 0.16522336), (0.9378032, 0.11556649), (0.94419074, 0.15184546), (0.38891035, 0.20045233), (0.6647678, 0.18026114), (0.6659341, 0.21049452), (0.3866927, 0.18585372), (0.6616087, 0.15011227), (0.6647678, 0.18026114), (0.11969241, 0.49636936), (0.21644375, 0.48071134), (0.21807465, 0.50586313), (0.55253685, 0.24532878), (0.280949, 0.3197024), (0.2716609, 0.28911793), (0.55253685, 0.24532878), (0.55015165, 0.24506688), (0.47769734, 0.2704593), (0, 0.054967284), (0.29809296, 0), (0.30030575, 0.032303333), (0.38896564, 0.21402144), (0.6659341, 0.21049452), (0.66504115, 0.24092853), (0.49718347, 0.4302498), (0.4647357, 0.43854606), (0.47252664, 0.41524148), (0.8016226, 0.69575006), (0.82823455, 0.6993601), (0.8168589, 0.72125727), (0.79885006, 0.68540996), (0.8265542, 0.6742472), (0.82823455, 0.6993601), (0.03218375, 0.1886363), (0.060124647, 0.17937613), (0.05813785, 0.20376968), (0.03218375, 0.1886363), (0.04690552, 0.15824163), (0.060124647, 0.17937613), (0.67489743, 0.529), (0.6784829, 0.5576418), (0.6541436, 0.5499628), (0.9514548, 0.18896043), (0.98701024, 0.14078116), (0.9953872, 0.1769203), (0.88401145, 0.16522336), (0.94419074, 0.15184546), (0.9514548, 0.18896043), (0.9378032, 0.11556649), (0.97826207, 0.1053983), (0.98701024, 0.14078116), (0.15856405, 0.17040193), (0.12222031, 0.20235765), (0.12148418, 0.17409706), (0.2203636, 0.20075655), (0.16039982, 0.20376968), (0.15856405, 0.17040193), (0.8529577, 0.63070506), (0.88959336, 0.5990171), (0.89051837, 0.62795997), (0.792, 0.597), (0.85154563, 0.597), (0.8529577, 0.63070506), (0.9290726, 0.664), (0.8890683, 0.6936381), (0.88856655, 0.664), (0.9927002, 0.70910674), (0.92636377, 0.69849885), (0.9290726, 0.664), (0.92636377, 0.69849885), (0.8837247, 0.72145915), (0.8890683, 0.6936381), (0.9783437, 0.7459888), (0.9197156, 0.73151684), (0.92636377, 0.69849885), (0.9197156, 0.73151684), (0.8732111, 0.74702066), (0.8837247, 0.72145915), (0.9674488, 0.7830106), (0.90827954, 0.7640222), (0.9197156, 0.73151684), (0.90827954, 0.7640222), (0.8610824, 0.7741754), (0.8732111, 0.74702066), (0.310569, 0.4000001), (0.3976178, 0.4260813), (0.35926685, 0.45141804), (0.58093697, 0.049221754), (0.6260592, 0.028988719), (0.61779326, 0.058581233), (0.52584356, 0.0007390976), (0.5881305, 0.014884114), (0.58093697, 0.049221754), (0.5881305, 0.014884114), (0.6384724, 0), (0.6260592, 0.028988719), (0.888199, 0.20221627), (0.9514548, 0.18896043), (0.96102494, 0.22702193), (0.6647678, 0.18026114), (0.88401145, 0.16522336), (0.888199, 0.20221627), (0.6616087, 0.15011227), (0.87999266, 0.12957), (0.88401145, 0.16522336), (0.25994948, 0.5572378), (0.043, 0.5574494), (0.045488127, 0.5154615), (0.21644375, 0.48071134), (0.54004174, 0.43000007), (0.54525214, 0.50586313), (0.2716609, 0.28911793), (0.03741576, 0.31185782), (0.040860754, 0.2689711), (0.280949, 0.3197024), (0.042765528, 0.35306513), (0.03741576, 0.31185782), (0.22176386, 0.0019999743), (0.00851093, 0.043722034), (0.0019999985, 0.0019999743), (0.29809296, 0), (0.52584356, 0.0007390976), (0.524162, 0.038337827), (0.6659341, 0.21049452), (0.888199, 0.20221627), (0.89201427, 0.24092853), (0.8016226, 0.69575006), (0.792, 0.697875), (0.79885006, 0.68540996), (0.6784829, 0.5576418), (0.69664294, 0.6186941), (0.6677002, 0.6186941), (0.4647357, 0.43854606), (0.3976178, 0.4260813), (0.4106811, 0.4000001), (0.8168589, 0.72125727), (0.8732111, 0.74702066), (0.8610824, 0.7741754), (0.82823455, 0.6993601), (0.8837247, 0.72145915), (0.8732111, 0.74702066), (0.82823455, 0.6993601), (0.8890683, 0.6936381), (0.8837247, 0.72145915), (0.8265542, 0.6742472), (0.88856655, 0.664), (0.8890683, 0.6936381), (0.950966, 0.60779315), (0.89051837, 0.62795997), (0.88959336, 0.5990171), (0.060124647, 0.17937613), (0.12148418, 0.17409706), (0.12222031, 0.20235765), (0.060124647, 0.17937613), (0.11376982, 0.14700007), (0.12148418, 0.17409706), (0.06569333, 0.97501975), (0.0050000013, 0.96209955), (0.012138534, 0.934), (0.06569333, 0.97501975), (0.0050000013, 0.9918039), (0.0050000013, 0.96209955), (0.6784829, 0.5576418), (0.6677002, 0.6186941), (0.639, 0.6110862), (0.386, 0.2237587), (0.38756585, 0.20549333), (0.38896564, 0.21402144), (0.877518, 0.11574733), (0.9596192, 0.097), (0.9378032, 0.11556649), (0.97826207, 0.1053983), (0.9378032, 0.11556649), (0.9596192, 0.097), (0.12148418, 0.17409706), (0.11376982, 0.14700007), (0.12976208, 0.1516304), (0.15856405, 0.17040193), (0.1336942, 0.16456711), (0.21792941, 0.1585238), (0.30042702, 0.063839674), (0.30030575, 0.032303333), (0.43779123, 0.053449273), (0.9590263, 0.5939392), (0.792, 0.5939392), (0.9633673, 0.47599995), (0.63373286, 0.45800006), (0.63373286, 0.56837547), (0.466, 0.57474774), (0.97166306, 0.5904634), (0.9590263, 0.5939392), (0.9633673, 0.47599995), (0.43491283, 0.69), (0.44683006, 0.6947337), (0.37, 0.79871523), (0.79248655, 0.12205982), (0.9596192, 0.097), (0.877518, 0.11574733), (0.001999982, 0.35600007), (0.20758067, 0.35600007), (0.20640084, 0.370121), (0.56266105, 0.23983002), (0.55253685, 0.24532878), (0.55484617, 0.23901951), (0.72651947, 0.7467004), (0.7519376, 0.665), (0.7884044, 0.75290036), (0.21644375, 0.48071134), (0.11969241, 0.49636936), (0.14509158, 0.49134517), (0.040860754, 0.2689711), (0.26054463, 0.22500002), (0.4795362, 0.23336399), (0.11969241, 0.49636936), (0.1196214, 0.4980693), (0.117, 0.49744225), (0.1196214, 0.4980693), (0.14856376, 0.5011119), (0.145251, 0.4969046), (0.49143526, 0.24265027), (0.4957432, 0.24929154), (0.49348548, 0.24963045), (0.48545548, 0.25594032), (0.55484617, 0.23901951), (0.48040628, 0.24724627), (0.4795362, 0.23336399), (0.49348548, 0.24963045), (0.48948082, 0.2539276), (0.49348548, 0.24963045), (0.4957432, 0.24929154), (0.48974434, 0.25722837), (0.48974434, 0.25722837), (0.48948082, 0.2539276), (0.49348548, 0.24963045), (0.48974434, 0.25722837), (0.48545548, 0.25594032), (0.48948082, 0.2539276), (0.4795362, 0.23336399), (0.48948082, 0.2539276), (0.48040628, 0.24724627), (0.48545548, 0.25594032), (0.56266105, 0.23983002), (0.55484617, 0.23901951), (0.48948082, 0.2539276), (0.48545548, 0.25594032), (0.48040628, 0.24724627), (0.145251, 0.4969046), (0.11969241, 0.49636936), (0.117, 0.49744225), (0.145251, 0.4969046), (0.14509158, 0.49134517), (0.11969241, 0.49636936), (0.49143526, 0.24265027), (0.49348548, 0.24963045), (0.4795362, 0.23336399), (0.1196214, 0.4980693), (0.145251, 0.4969046), (0.117, 0.49744225), (0.48545548, 0.25594032), (0.55015165, 0.24506688), (0.56266105, 0.23983002), (0.48545548, 0.25594032), (0.47769734, 0.2704593), (0.55015165, 0.24506688), (0.4795362, 0.23336399), (0.48040628, 0.24724627), (0.040860754, 0.2689711), (0.7884044, 0.75290036), (0.76105845, 0.75775206), (0.72651947, 0.7467004), (0.76105845, 0.75775206), (0.7471594, 0.75447613), (0.72651947, 0.7467004), (0.7471594, 0.75447613), (0.7263922, 0.7605643), (0.72651947, 0.7467004), (0.7471594, 0.75447613), (0.7457821, 0.7625168), (0.7263922, 0.7605643), (0.20640084, 0.370121), (0.20758067, 0.35600007), (0.2330634, 0.36234593), (0.47769734, 0.2704593), (0.48545548, 0.25594032), (0.48974434, 0.25722837), (0.386, 0.2237587), (0.3866927, 0.18585372), (0.38756585, 0.20549333), (0.7884044, 0.6704926), (0.7884044, 0.75290036), (0.7519376, 0.665), (0.55253685, 0.24532878), (0.56266105, 0.23983002), (0.55015165, 0.24506688), (0.30030575, 0.032303333), (0.30042702, 0.063839674), (0.08603373, 0.059615254), (0.72651947, 0.7467004), (0.7263922, 0.7605643), (0.52500004, 0.73790246), (0.6616087, 0.15011227), (0.46630698, 0.16500747), (0.65683854, 0.11965847), (0.6616087, 0.15011227), (0.3866927, 0.18585372), (0.46630698, 0.16500747), (0.5214913, 0.052887082), (0.6022711, 0.06526494), (0.43779123, 0.053449273), (0.44802624, 0.525), (0.3659573, 0.5333149), (0.281, 0.525), (0.44683006, 0.6947337), (0.51776594, 0.7392691), (0.5780298, 0.79871523), (0.4326543, 0.059157252), (0.43779123, 0.053449273), (0.43865606, 0.16749835), (0.9633673, 0.47599995), (0.9756349, 0.4801594), (0.97166306, 0.5904634), (0.43865606, 0.16749835), (0.43779123, 0.053449273), (0.6022711, 0.06526494), (0.44683006, 0.6947337), (0.5780298, 0.79871523), (0.37, 0.79871523), (0.43779123, 0.053449273), (0.524162, 0.038337827), (0.5214913, 0.052887082), (0.43779123, 0.053449273), (0.30030575, 0.032303333), (0.524162, 0.038337827), (0.22176386, 0.0019999743), (0.09273457, 0.029820204), (0.00851093, 0.043722034), (0.30042702, 0.063839674), (0.43779123, 0.053449273), (0.4326543, 0.059157252), (0.12923494, 0.51679415), (0.26091167, 0.5266138), (0.045488127, 0.5154615), (0.12923494, 0.51679415), (0.13009427, 0.504), (0.26091167, 0.5266138), (0.5214913, 0.052887082), (0.58093697, 0.049221754), (0.6022711, 0.06526494), (0.5214913, 0.052887082), (0.524162, 0.038337827), (0.58093697, 0.049221754), (0.3976178, 0.4260813), (0.3955773, 0.40471756), (0.4106811, 0.4000001), (0.3976178, 0.4260813), (0.39126733, 0.4170947), (0.3955773, 0.40471756), (0.15856405, 0.17040193), (0.12148418, 0.17409706), (0.1336942, 0.16456711), (0.12148418, 0.17409706), (0.12976208, 0.1516304), (0.1336942, 0.16456711), (0.39126733, 0.4170947), (0.3976178, 0.4260813), (0.310569, 0.4000001), (0.877518, 0.11574733), (0.9378032, 0.11556649), (0.87999266, 0.12957), (0.38896564, 0.21402144), (0.38756585, 0.20549333), (0.38891035, 0.20045233), (0.639, 0.6110862), (0.6541436, 0.5499628), (0.6784829, 0.5576418), (0.04690552, 0.15824163), (0.03218375, 0.1886363), (0.025, 0.17916429), (0.11376982, 0.14700007), (0.060124647, 0.17937613), (0.04690552, 0.15824163), (0.12222031, 0.20235765), (0.05813785, 0.20376968), (0.060124647, 0.17937613), (0.8890683, 0.6936381), (0.82823455, 0.6993601), (0.8265542, 0.6742472), (0.8732111, 0.74702066), (0.8168589, 0.72125727), (0.82823455, 0.6993601), (0.8168589, 0.72125727), (0.792, 0.697875), (0.8016226, 0.69575006), (0.4106811, 0.4000001), (0.47252664, 0.41524148), (0.4647357, 0.43854606), (0.6659341, 0.21049452), (0.38896564, 0.21402144), (0.38891035, 0.20045233), (0.89201427, 0.24092853), (0.66504115, 0.24092853), (0.6659341, 0.21049452), (0.66504115, 0.24092853), (0.386, 0.2237587), (0.38896564, 0.21402144), (0.524162, 0.038337827), (0.30030575, 0.032303333), (0.29809296, 0), (0.30030575, 0.032303333), (0.08603373, 0.059615254), (0, 0.054967284), (0.042765528, 0.35306513), (0.280949, 0.3197024), (0.2918819, 0.35306513), (0.03741576, 0.31185782), (0.2716609, 0.28911793), (0.280949, 0.3197024), (0.023, 0.22669113), (0.26054463, 0.22500002), (0.040860754, 0.2689711), (0.54525214, 0.50586313), (0.21807465, 0.50586313), (0.21644375, 0.48071134), (0.21807465, 0.50586313), (0.14856376, 0.5011119), (0.1196214, 0.4980693), (0.25994948, 0.5572378), (0.26091167, 0.5266138), (0.46121538, 0.5574494), (0.045488127, 0.5154615), (0.26091167, 0.5266138), (0.25994948, 0.5572378), (0.6616087, 0.15011227), (0.65683854, 0.11965847), (0.87999266, 0.12957), (0.65683854, 0.11965847), (0.79248655, 0.12205982), (0.87999266, 0.12957), (0.79248655, 0.12205982), (0.877518, 0.11574733), (0.87999266, 0.12957), (0.88401145, 0.16522336), (0.6647678, 0.18026114), (0.6616087, 0.15011227), (0.888199, 0.20221627), (0.6659341, 0.21049452), (0.6647678, 0.18026114), (0.96102494, 0.22702193), (0.89201427, 0.24092853), (0.888199, 0.20221627), (0.9953872, 0.1769203), (0.96102494, 0.22702193), (0.9514548, 0.18896043), (0.58093697, 0.049221754), (0.524162, 0.038337827), (0.52584356, 0.0007390976), (0.6260592, 0.028988719), (0.58093697, 0.049221754), (0.5881305, 0.014884114), (0.61779326, 0.058581233), (0.6022711, 0.06526494), (0.58093697, 0.049221754), (0.35926685, 0.45141804), (0.301, 0.4411286), (0.310569, 0.4000001), (0.9197156, 0.73151684), (0.9783437, 0.7459888), (0.9674488, 0.7830106), (0.8732111, 0.74702066), (0.9197156, 0.73151684), (0.90827954, 0.7640222), (0.92636377, 0.69849885), (0.9927002, 0.70910674), (0.9783437, 0.7459888), (0.8837247, 0.72145915), (0.92636377, 0.69849885), (0.9197156, 0.73151684), (0.9290726, 0.664), (0.99057245, 0.67088777), (0.9927002, 0.70910674), (0.8890683, 0.6936381), (0.9290726, 0.664), (0.92636377, 0.69849885), (0.8529577, 0.63070506), (0.7933394, 0.6336229), (0.792, 0.597), (0.88959336, 0.5990171), (0.8529577, 0.63070506), (0.85154563, 0.597), (0.15856405, 0.17040193), (0.21792941, 0.1585238), (0.2203636, 0.20075655), (0.12222031, 0.20235765), (0.15856405, 0.17040193), (0.16039982, 0.20376968), (0.9378032, 0.11556649), (0.88401145, 0.16522336), (0.87999266, 0.12957), (0.98701024, 0.14078116), (0.94419074, 0.15184546), (0.9378032, 0.11556649), (0.9514548, 0.18896043), (0.888199, 0.20221627), (0.88401145, 0.16522336), (0.98701024, 0.14078116), (0.9514548, 0.18896043), (0.94419074, 0.15184546), (0.82823455, 0.6993601), (0.8016226, 0.69575006), (0.79885006, 0.68540996), (0.47769734, 0.2704593), (0.2918819, 0.35306513), (0.280949, 0.3197024), (0.280949, 0.3197024), (0.55253685, 0.24532878), (0.47769734, 0.2704593), (0.2716609, 0.28911793), (0.55484617, 0.23901951), (0.55253685, 0.24532878), (0.48040628, 0.24724627), (0.2716609, 0.28911793), (0.040860754, 0.2689711), (0.48040628, 0.24724627), (0.55484617, 0.23901951), (0.2716609, 0.28911793), (0.21807465, 0.50586313), (0.1196214, 0.4980693), (0.11969241, 0.49636936), (0.6647678, 0.18026114), (0.38891035, 0.20045233), (0.3866927, 0.18585372), (0.043069273, 0.5726339), (0.40623015, 0.63160795), (0.017490339, 0.63160795), (0.4334514, 0.6489857), (0.4441939, 0.5800339), (0.45164642, 0.577), (0.015819147, 0.66519135), (0.009000031, 0.6592663), (0.015980732, 0.6575556), (0.015980732, 0.6575556), (0.011314668, 0.651), (0.36364058, 0.66519135), (0.46756202, 0.56), (0.46487913, 0.5664396), (0.36043304, 0.5659807), (0.24270111, 0.21451902), (0.24, 0.20800006), (0.34488285, 0.21440327), (0.61, 0.09494686), (0.6337191, 0.024999976), (0.640298, 0.027160168), (0.74421537, 0.66668123), (0.7470145, 0.6730908), (0.39584744, 0.66665053), (0.39584744, 0.66665053), (0.391, 0.6730908), (0.39581895, 0.659), (0.9898969, 0.65500146), (0.9935158, 0.6613481), (0.628, 0.6613481), (0.3823376, 0.635), (0.37781626, 0.6409799), (0.015000011, 0.635), (0.4334514, 0.6489857), (0.45164642, 0.577), (0.7882927, 0.6489857), (0.18842489, 0.88502026), (0.188, 0.7764674), (0.3533673, 0.8812956), (0.99842197, 0.21600008), (0.99842197, 0.38283646), (0.642, 0.36430025), (0.017000003, 0.89113957), (0.18348089, 0.797), (0.18348089, 0.891157), (0.63497275, 0.45048094), (0.279, 0.35981345), (0.63497275, 0.28400004), (0.043069273, 0.5726339), (0.017490339, 0.63160795), (0.01, 0.62802124), (0.40122944, 0.62086797), (0.40122944, 0.6281738), (0.319, 0.575), (0.925, 0.38300002), (0.97710985, 0.419654), (0.97710985, 0.42844808), (0.39584744, 0.66665053), (0.39581895, 0.659), (0.74421537, 0.66668123), (0.36550373, 0.5787929), (0.36263442, 0.572428), (0.46125427, 0.57272637), (0.015980732, 0.6575556), (0.36364058, 0.66519135), (0.015819147, 0.66519135), (0.70199996, 0.6235715), (0.9992827, 0.44300008), (0.9992827, 0.4499762), (0.46125427, 0.57272637), (0.36263442, 0.572428), (0.46487913, 0.5664396), (0.36263442, 0.572428), (0.015000019, 0.56), (0.36043304, 0.5659807), (0.704, 0.627), (0.77319896, 0.63293487), (0.7727631, 0.64063746), (0.020837521, 0.648751), (0.37781626, 0.6409799), (0.37341043, 0.64690155), (0.01607053, 0.6437286), (0.37781626, 0.6409799), (0.020837521, 0.648751), (0.34044567, 0.22044587), (0.24270111, 0.21451902), (0.34488285, 0.21440327), (0.9898969, 0.65500146), (0.6328993, 0.65513223), (0.98618543, 0.649), (0.628, 0.6613481), (0.6328993, 0.65513223), (0.9898969, 0.65500146), (0.043069273, 0.5726339), (0.01, 0.62802124), (0.044186324, 0.565), (0.84981906, 0.786), (0.84981906, 0.88194245), (0.68299997, 0.879539), (0.3451547, 0.3800888), (2.4488143e-8, 0.5299845), (2.4488143e-8, 0.365), (0.640298, 0.027160168), (0.98629844, 0.09494686), (0.61, 0.09494686), (0.3533673, 0.774), (0.3533673, 0.8812956), (0.188, 0.7764674), (0.638, 0.36699998), (0.98228496, 0.446478), (0.638, 0.53238577), (0.01607053, 0.6437286), (0.015000011, 0.635), (0.37781626, 0.6409799), (0.043069273, 0.5726339), (0.044186324, 0.565), (0.40623015, 0.63160795), (0.77319896, 0.63293487), (0.77875686, 0.627), (0.7727631, 0.64063746), (0.391, 0.6730908), (0.39584744, 0.66665053), (0.7470145, 0.6730908), (0.704, 0.627), (0.77875686, 0.627), (0.77319896, 0.63293487), (0.34855372, 0.20800006), (0.34488285, 0.21440327), (0.24, 0.20800006), (0.36263442, 0.572428), (0.36043304, 0.5659807), (0.46487913, 0.5664396), (0.4441939, 0.5800339), (0.4334514, 0.6489857), (0.426, 0.6463179), (0.3681019, 0.6594683), (0.36364058, 0.66519135), (0.011314668, 0.651), (0.011314668, 0.651), (0.015980732, 0.6575556), (0.009000031, 0.6592663), (0.38001812, 0.12770998), (0.025, 0.14416456), (0.38001812, 0.06400001), (0.16192573, 0.9195059), (0.14415722, 0.92423785), (0.14415722, 0.89423364), (0.5524979, 0.8207459), (0.548, 0.8024212), (0.57800126, 0.802), (0.77243394, 0.7893609), (0.771, 0.7705468), (0.8009759, 0.77184904), (0.5201517, 0.83638334), (0.5380094, 0.832), (0.54475206, 0.8612368), (0.610015, 0.28700173), (0.592245, 0.28700173), (0.5918505, 0.25699997), (0.8427399, 0.92886), (0.8252892, 0.9300042), (0.8252892, 0.9), (0.182, 0.8954887), (0.19919379, 0.891), (0.20115691, 0.9209399), (0.41178316, 0.6301522), (0.4225059, 0.6569447), (0.397, 0.6569447), (0.5607371, 0.84625447), (0.5524979, 0.8207459), (0.57800126, 0.82038784), (0.77944016, 0.8156128), (0.77243394, 0.7893609), (0.79791576, 0.79046786), (0.499, 0.85729617), (0.5201517, 0.83638334), (0.5258835, 0.8612368), (0.953019, 0.7924763), (0.92726135, 0.808248), (0.9223473, 0.78321993), (0.39775482, 0.8493266), (0.41711038, 0.87450176), (0.392, 0.8789759), (0.038575877, 0.5543019), (0.017, 0.5326026), (0.038575877, 0.519), (0.7312205, 0.88849795), (0.7315558, 0.91400164), (0.71378577, 0.91400164), (0.58524024, 0.90000004), (0.6107461, 0.9), (0.61100423, 0.91838604), (0.86086863, 0.48600006), (0.86390895, 0.51132405), (0.8455765, 0.5157903), (0.97852707, 0.96800125), (0.978169, 0.9424979), (0.9964937, 0.938), (0.829, 0.2492888), (0.84192204, 0.2712791), (0.829, 0.2843609), (0.57707936, 0.885), (0.5787482, 0.91045123), (0.56155443, 0.91493994), (0.42674148, 0.89935416), (0.42674148, 0.92486), (0.40929085, 0.92600423), (0.51537955, 0.7300988), (0.50741476, 0.7268969), (0.51537955, 0.699), (0.8352028, 0.779), (0.8301927, 0.7847021), (0.804, 0.779), (0.8586753, 0.24400008), (0.8649729, 0.25248027), (0.84192204, 0.2712791), (0.7657238, 0.8865916), (0.7681548, 0.896958), (0.7393225, 0.91013694), (0.8009759, 0.764), (0.8009759, 0.77184904), (0.771, 0.7705468), (0.25568235, 0.0019999743), (0.22667444, 0.009667635), (0.225, 0.0019999743), (0.40151444, 0.7370795), (0.39419103, 0.73690295), (0.40634695, 0.71074295), (0.71, 0.9392851), (0.71213216, 0.928), (0.8434957, 0.94536287), (0.02415405, 0.8212362), (0.027051916, 0.8616224), (0.019, 0.8549047), (0.5650597, 0.747), (0.5605135, 0.7511545), (0.531, 0.747), (0.6162376, 0.59881735), (0.6109671, 0.60085607), (0.61064225, 0.5819869), (0.2991137, 0.9427489), (0.293, 0.9474016), (0.293, 0.9261336), (0.5153762, 0.677), (0.5203351, 0.6785279), (0.5208978, 0.6938563), (0.868, 0.24767137), (0.87192607, 0.24400008), (0.88552994, 0.25131392), (0.8852591, 0.25651193), (0.88552994, 0.25131392), (0.9038174, 0.24400008), (0.6922892, 0.923), (0.6922892, 0.9417999), (0.563, 0.9465461), (0.43249008, 0.94074917), (0.43396595, 0.92200726), (0.56305003, 0.92732966), (0.014999999, 0.9017593), (0.14415722, 0.89423364), (0.14415722, 0.92423785), (0.32974648, 0.9060364), (0.20115691, 0.9209399), (0.19919379, 0.891), (0.481, 0.578), (0.61064225, 0.5819869), (0.6109671, 0.60085607), (0.9807857, 0.888), (0.98039126, 0.91800165), (0.848, 0.9124881), (0.12844911, 0.669), (0.13306369, 0.68858314), (0.002, 0.70479333), (0.172, 0.9596524), (0.27636477, 0.9356408), (0.28353408, 0.9569793), (0.38898748, 0.8815777), (0.3664766, 0.8815777), (0.356, 0.775), (0.28164467, 0.931), (0.29280576, 0.9596524), (0.28353408, 0.9569793), (0.02415405, 0.8212362), (0.0303547, 0.817), (0.03373045, 0.8639561), (0.16724701, 0.72935116), (0.15371993, 0.6914048), (0.15894055, 0.6861442), (0.9038174, 0.24400008), (0.88552994, 0.25131392), (0.87192607, 0.24400008), (0.43396595, 0.92200726), (0.43, 0.91832435), (0.43, 0.91062635), (0.40032515, 0.7007803), (0.40634695, 0.71074295), (0.39419103, 0.73690295), (0.386, 0.74026436), (0.39419103, 0.73690295), (0.40151444, 0.7370795), (0.27729657, 0.6880727), (0.15894055, 0.6861442), (0.14848025, 0.673), (0.15894055, 0.6861442), (0.15371993, 0.6914048), (0.14848025, 0.673), (0.15371993, 0.6914048), (0.146, 0.6996992), (0.14848025, 0.673), (0.15371993, 0.6914048), (0.15010907, 0.7008241), (0.146, 0.6996992), (0.14848025, 0.673), (0.28107163, 0.673), (0.27729657, 0.6880727), (0.613, 0.28186977), (0.6270697, 0.24997246), (0.6269995, 0.26821566), (0.613, 0.28186977), (0.613, 0.24100006), (0.6270697, 0.24997246), (0.386, 0.699), (0.40032515, 0.7007803), (0.386, 0.74026436), (0.40032515, 0.7007803), (0.39419103, 0.73690295), (0.386, 0.74026436), (0.9934369, 0.9279335), (0.99019974, 0.934901), (0.98794425, 0.92), (0.99019974, 0.934901), (0.8618984, 0.9501941), (0.98794425, 0.92), (0.8618984, 0.9501941), (0.8711095, 0.93611485), (0.98794425, 0.92), (0.8618984, 0.9501941), (0.86688256, 0.9304419), (0.8711095, 0.93611485), (0.8618984, 0.9501941), (0.86, 0.92025), (0.86688256, 0.9304419), (0.86, 0.92025), (0.86784506, 0.92), (0.86688256, 0.9304419), (0.407, 0.95516956), (0.5131728, 0.9411727), (0.5369637, 0.95516956), (0.5131728, 0.9411727), (0.5174496, 0.935), (0.5369637, 0.95516956), (0.1525624, 0.7494303), (0.14646003, 0.74862), (0.17600422, 0.734), (0.14646003, 0.74862), (0.146, 0.734), (0.17600422, 0.734), (0.56305003, 0.92732966), (0.43396595, 0.92200726), (0.43486643, 0.905), (0.43396595, 0.92200726), (0.43, 0.91062635), (0.43486643, 0.905), (0.236, 0.35600007), (0.2729657, 0.35600007), (0.2611539, 0.37368655), (0.9701957, 0.82496566), (0.96294075, 0.8245276), (0.9701957, 0.788), (0.96294075, 0.8245276), (0.95600003, 0.7938102), (0.9701957, 0.788), (0.15894055, 0.6861442), (0.17446133, 0.7309003), (0.16724701, 0.72935116), (0.03373045, 0.8639561), (0.027051916, 0.8616224), (0.02415405, 0.8212362), (0.28353408, 0.9569793), (0.27636477, 0.9356408), (0.28164467, 0.931), (0.17446133, 0.7309003), (0.15894055, 0.6861442), (0.27729657, 0.6880727), (0.14192083, 0.817), (0.03373045, 0.8639561), (0.0303547, 0.817), (0.40929085, 0.896), (0.40929085, 0.92600423), (0.28, 0.9195459), (0.71378577, 0.91400164), (0.58100003, 0.8895135), (0.7133913, 0.884), (0.002, 0.70479333), (0.13306369, 0.68858314), (0.13702492, 0.70479333), (0.481, 0.578), (0.61443263, 0.578), (0.61064225, 0.5819869), (0.9807857, 0.888), (0.848, 0.9124881), (0.848188, 0.89819205), (0.431, 0.8999039), (0.55959123, 0.885), (0.56155443, 0.91493994), (0.386, 0.677), (0.5153762, 0.677), (0.5160659, 0.69578725), (0.42819133, 0.9369114), (0.2991137, 0.9427489), (0.29773, 0.924), (0.5918505, 0.25699997), (0.592245, 0.28700173), (0.463, 0.28117466), (0.8252892, 0.9), (0.8252892, 0.9300042), (0.696, 0.92354596), (0.43, 0.91832435), (0.43396595, 0.92200726), (0.43249008, 0.94074917), (0.88552994, 0.25131392), (0.8852591, 0.25651193), (0.868, 0.24767137), (0.5208978, 0.6938563), (0.5160659, 0.69578725), (0.5153762, 0.677), (0.293, 0.9261336), (0.29773, 0.924), (0.2991137, 0.9427489), (0.61064225, 0.5819869), (0.61443263, 0.578), (0.6162376, 0.59881735), (0.63204926, 0.26946604), (0.6269995, 0.26821566), (0.6270697, 0.24997246), (0.15010907, 0.7008241), (0.15371993, 0.6914048), (0.16724701, 0.72935116), (0.9839956, 0.826), (0.97002983, 0.8523339), (0.964, 0.85357374), (0.06779087, 0.93917394), (0.044, 0.95317084), (0.06350457, 0.933), (0.4629894, 0.88967586), (0.433, 0.87601274), (0.43907475, 0.875), (0.4629894, 0.88967586), (0.433, 0.89061946), (0.433, 0.87601274), (0.06779087, 0.93917394), (0.17396358, 0.95317084), (0.044, 0.95317084), (0.7135321, 0.94536287), (0.71, 0.9392851), (0.8434957, 0.94536287), (0.40634695, 0.71074295), (0.41122398, 0.716075), (0.40151444, 0.7370795), (0.531, 0.747), (0.5605135, 0.7511545), (0.55584997, 0.7649968), (0.9839956, 0.85668254), (0.97002983, 0.8523339), (0.9839956, 0.826), (0.7393225, 0.91013694), (0.735, 0.885), (0.7657238, 0.8865916), (0.70292073, 0.936), (0.71470153, 0.95862216), (0.683, 0.95862216), (0.84192204, 0.2712791), (0.829, 0.2492888), (0.8586753, 0.24400008), (0.978169, 0.9424979), (0.97852707, 0.96800125), (0.953, 0.9527335), (0.86390895, 0.51132405), (0.86086863, 0.48600006), (0.887577, 0.490991), (0.8061406, 0.8044159), (0.804, 0.779), (0.8301927, 0.7847021), (0.49, 0.7015352), (0.51537955, 0.699), (0.50741476, 0.7268969), (0.40929085, 0.92600423), (0.40929085, 0.896), (0.42674148, 0.89935416), (0.56155443, 0.91493994), (0.55959123, 0.885), (0.57707936, 0.885), (0.98039126, 0.91800165), (0.9807857, 0.888), (0.99855584, 0.888), (0.9964937, 0.938), (0.9969149, 0.96800125), (0.97852707, 0.96800125), (0.8455765, 0.5157903), (0.842, 0.48600006), (0.86086863, 0.48600006), (0.61100423, 0.91838604), (0.581, 0.91838604), (0.58524024, 0.90000004), (0.71378577, 0.91400164), (0.7133913, 0.884), (0.7312205, 0.88849795), (0.77415925, 0.885), (0.7681548, 0.896958), (0.7657238, 0.8865916), (0.77415925, 0.885), (0.7774065, 0.89186084), (0.7681548, 0.896958), (0.41711038, 0.87450176), (0.39775482, 0.8493266), (0.40492633, 0.8413691), (0.9223473, 0.78321993), (0.95206684, 0.782), (0.953019, 0.7924763), (0.79791576, 0.79046786), (0.7870017, 0.8149516), (0.77944016, 0.8156128), (0.4225059, 0.6569447), (0.41178316, 0.6301522), (0.4194135, 0.626), (0.20115691, 0.9209399), (0.1836688, 0.9209399), (0.182, 0.8954887), (0.8252892, 0.9), (0.8427399, 0.9033541), (0.8427399, 0.92886), (0.904, 0.782), (0.9223473, 0.78321993), (0.92726135, 0.808248), (0.54475206, 0.8612368), (0.5258835, 0.8612368), (0.5201517, 0.83638334), (0.8009759, 0.77184904), (0.79791576, 0.79046786), (0.77243394, 0.7893609), (0.57800126, 0.802), (0.57800126, 0.82038784), (0.5524979, 0.8207459), (0.14415722, 0.89423364), (0.16192573, 0.894), (0.16192573, 0.9195059), (0.39775482, 0.8493266), (0.392, 0.8405208), (0.40492633, 0.8413691), (0.392, 0.8405208), (0.39809725, 0.836), (0.40492633, 0.8413691), (0.644, 0.34636545), (0.644, 0.24400008), (0.8257175, 0.26840508), (0.656, 0.7675296), (0.7581513, 0.766), (0.7581513, 0.8198277), (0.38284063, 0.7672294), (0.32482678, 0.7174656), (0.37283483, 0.668), (0.37999934, 0.770585), (0.144, 0.770585), (0.32482678, 0.7174656), (0.68033403, 0.8579821), (0.67867094, 0.86733234), (0.492, 0.86733234), (0.463, 0.3025143), (0.46541652, 0.29226613), (0.5114279, 0.29942596), (0.7133521, 0.714464), (0.71301824, 0.72233075), (0.527, 0.72418094), (0.91249543, 0.39611948), (0.9126511, 0.38381183), (0.921184, 0.39595556), (0.7266681, 0.6969835), (0.7269262, 0.70705336), (0.527, 0.70705336), (0.99530286, 0.44018006), (0.986, 0.44208968), (0.986, 0.38847756), (0.44878522, 0.5124499), (0.44765785, 0.52068275), (0.249, 0.52244335), (0.9126511, 0.38381183), (0.91249543, 0.39611948), (0.713, 0.38300002), (0.3008196, 0.574), (0.30124196, 0.5866478), (0.11499999, 0.574), (0.32482678, 0.7174656), (0.38284063, 0.7672294), (0.37999934, 0.770585), (0.32209525, 0.67026556), (0.37283483, 0.668), (0.32482678, 0.7174656), (0.583, 0.749), (0.76804054, 0.8271335), (0.583, 0.84890926), (5.114988e-9, 0.81616277), (5.114988e-9, 0.714), (0.18482678, 0.79278237), (0.023, 0.71058154), (0.12533288, 0.708), (0.12533288, 0.7625234), (0.5114279, 0.29942596), (0.5168277, 0.3025143), (0.463, 0.3025143), (0.9126511, 0.38381183), (0.9210859, 0.38300002), (0.921184, 0.39595556), (0.72394145, 0.694), (0.7266681, 0.6969835), (0.527, 0.70705336), (0.53049403, 0.69072306), (0.527, 0.68711984), (0.72767127, 0.68134356), (0.986, 0.38847756), (0.98919344, 0.38600004), (0.99530286, 0.44018006), (0.9888421, 0.5186121), (0.98457074, 0.5178206), (0.979, 0.4671451), (0.7176078, 0.72418094), (0.71301824, 0.72233075), (0.7133521, 0.714464), (0.6119402, 0.10134113), (0.61, 0.09800005), (0.799167, 0.1036489), (0.23200001, 0.8910625), (0.23512787, 0.8879533), (0.41781956, 0.8910625), (0.3008196, 0.574), (0.30511466, 0.5842575), (0.30124196, 0.5866478), (0.98431677, 0.21962607), (0.97865534, 0.21135926), (0.9822085, 0.20899999), (0.577, 0.0019999743), (0.5893168, 0.0019999743), (0.58129156, 0.009698033), (0.6659222, 0.87), (0.6702213, 0.87149316), (0.66634923, 0.8816107), (0.97865534, 0.21135926), (0.98431677, 0.21962607), (0.972, 0.21962607), (0.67487484, 0.855), (0.68033403, 0.8579821), (0.492, 0.86733234), (0.8460532, 0.09800005), (0.799167, 0.1036489), (0.61, 0.09800005), (0.7132885, 0.71), (0.7133521, 0.714464), (0.527, 0.72418094), (0.7276051, 0.677), (0.72767127, 0.68134356), (0.527, 0.68711984), (0.45235807, 0.52244335), (0.44765785, 0.52068275), (0.44878522, 0.5124499), (0.4462775, 0.509), (0.44878522, 0.5124499), (0.249, 0.52244335), (0.7133521, 0.714464), (0.7132885, 0.71), (0.7176078, 0.72418094), (0.66634923, 0.8816107), (0.483, 0.8816107), (0.6659222, 0.87), (0.32482678, 0.7174656), (0.144, 0.770585), (0.14494647, 0.76216793), (0.5114279, 0.29942596), (0.46541652, 0.29226613), (0.51258737, 0.29000008), (0.79701453, 0.113955855), (0.6119402, 0.10134113), (0.799167, 0.1036489), (0.9888421, 0.46500003), (0.9888421, 0.5186121), (0.979, 0.4671451), (0.72915953, 0.69072306), (0.53049403, 0.69072306), (0.72767127, 0.68134356), (0.14494647, 0.76216793), (0.32209525, 0.67026556), (0.32482678, 0.7174656), (0.23512787, 0.8879533), (0.42137942, 0.883), (0.41781956, 0.8910625), (0.792, 0.747), (0.9737959, 0.83254445), (0.792, 0.7556901), (0.83898467, 0.48800004), (0.83898467, 0.50076956), (0.704, 0.5770286), (0.351, 0.20899999), (0.36794335, 0.20899999), (0.36094058, 0.21967816), (0.6643577, 0.909), (0.6643577, 0.92358893), (0.529, 0.93969065), (0.008, 0.9301571), (0.008, 0.916), (0.16242446, 0.9297588), (0.79399997, 0.39900005), (0.9001005, 0.40084112), (0.9001005, 0.4149983), (0.4132718, 0.95981777), (0.307, 0.95916927), (0.307, 0.945), (0.224, 0.16394341), (0.224, 0.14700007), (0.37299982, 0.20451593), (0.27470398, 0.916), (0.27470398, 0.9301693), (0.139, 0.94512105), (0.9879291, 0.8734585), (0.853, 0.89427376), (0.853, 0.788), (0.5296999, 0.802), (0.47148532, 0.890723), (0.368, 0.802)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
    }
}

def "_materials"
{
    def Material "japanese_toy"
    {
        string inputs:file1:varname = "st"
        string inputs:file2:varname = "st"
        token outputs:surface.connect = </_materials/japanese_toy/previewShader.outputs:surface>

        def Shader "previewShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </_materials/japanese_toy/file1.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </_materials/japanese_toy/file2.outputs:rgb>
            float inputs:roughness = 0.5527864
            token outputs:surface
        }

        def Shader "file1"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @/Users/liu.amy05/Documents/Neural-for-USD/assets/japanesePlaneToy/textures/japanesePlaneToy_Diffuse.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </_materials/japanese_toy/place2dTexture1.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "file2"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1, -1, -1, 0)
            asset inputs:file = @/Users/liu.amy05/Documents/Neural-for-USD/assets/japanesePlaneToy/textures/japanesePlaneToy_Normal.png@
            float4 inputs:scale = (2, 2, 2, 1)
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </_materials/japanese_toy/place2dTexture2.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "place2dTexture1"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            string inputs:varname.connect = </_materials/japanese_toy.inputs:file1:varname>
            float2 outputs:result
        }

        def Shader "place2dTexture2"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            string inputs:varname.connect = </_materials/japanese_toy.inputs:file2:varname>
            float2 outputs:result
        }
    }
}

def Xform "cam_path"
{
    matrix4d xformOp:transform = ( (9.000065803527832, 0, 0, 0), (0, 9.122760772705078, 0, 0), (0, 0, 9.122760772705078, 0), (0, 0, 4.433056831359863, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Xform "sun"
{
    matrix4d xformOp:transform = ( (0.9814811944961548, 0.04374975711107254, -0.18649554252624512, 0), (-0.11010859161615372, 0.9255111813545227, -0.36236056685447693, 0), (0.15675051510334015, 0.3761848509311676, 0.9131890535354614, 0), (2.783118724822998, 4.1643571853637695, 4.0690202713012695, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def DistantLight "Sun_001"
    {
        color3f color = (1, 1, 1)
        float intensity = 1
        float specular = 1
    }
}

def Xform "Xform_MyCam"
{
    def Camera "MyCam"
    {
        token projection = "perspective"
    }

    def Camera "MyCam1"
    {
        float4[] clippingPlanes.timeSamples = {
            1: [],
        }
        float2 clippingRange.timeSamples = {
            1: (1, 1000000),
        }
        float focalLength.timeSamples = {
            1: 50,
        }
        float focusDistance.timeSamples = {
            1: 0,
        }
        float fStop.timeSamples = {
            1: 0,
        }
        float horizontalAperture.timeSamples = {
            1: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            1: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            1: "perspective",
        }
        float verticalAperture.timeSamples = {
            1: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            1: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            1: ( (0.30901701199735154, -2.5651979290719495e-9, -0.9510565105692873, 0), (-0.1426584736797535, 0.9886859970027568, -0.046352553522195646, 0), (0.9402962544770621, 0.14999999776888306, 0.3055207922314671, 0), (4.701481342315674, 0.7499999999999999, 1.5276039838790894, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam2"
    {
        float4[] clippingPlanes.timeSamples = {
            2: [],
        }
        float2 clippingRange.timeSamples = {
            2: (1, 1000000),
        }
        float focalLength.timeSamples = {
            2: 50,
        }
        float focusDistance.timeSamples = {
            2: 0,
        }
        float fStop.timeSamples = {
            2: 0,
        }
        float horizontalAperture.timeSamples = {
            2: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            2: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            2: "perspective",
        }
        float verticalAperture.timeSamples = {
            2: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            2: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            2: ( (0.30901700037972046, 4.069669393147456e-9, -0.9510565143440846, 0), (-0.2377641149961247, 0.9682458405719048, -0.07725424153608071, 0), (0.9208565138480748, 0.2499999844304105, 0.2992044262512924, 0), (4.60428285598755, 1.25, 1.4960222244262698, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam3"
    {
        float4[] clippingPlanes.timeSamples = {
            3: [],
        }
        float2 clippingRange.timeSamples = {
            3: (1, 1000000),
        }
        float focalLength.timeSamples = {
            3: 50,
        }
        float focusDistance.timeSamples = {
            3: 0,
        }
        float fStop.timeSamples = {
            3: 0,
        }
        float horizontalAperture.timeSamples = {
            3: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            3: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            3: "perspective",
        }
        float verticalAperture.timeSamples = {
            3: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            3: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            3: ( (0.30901700711707075, -2.05417904908245e-9, -0.9510565121549868, 0), (-0.33286978393961664, 0.9367496976854582, -0.10815595603662216, 0), (0.8909019004651417, 0.35000000555171823, 0.289471587312807, 0), (4.454509735107422, 1.7500001192092896, 1.4473580121994016, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam4"
    {
        float4[] clippingPlanes.timeSamples = {
            4: [],
        }
        float2 clippingRange.timeSamples = {
            4: (1, 1000000),
        }
        float focalLength.timeSamples = {
            4: 50,
        }
        float focusDistance.timeSamples = {
            4: 0,
        }
        float fStop.timeSamples = {
            4: 0,
        }
        float horizontalAperture.timeSamples = {
            4: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            4: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            4: "perspective",
        }
        float verticalAperture.timeSamples = {
            4: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            4: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            4: ( (0.30901702070883896, -1.1258378951328753e-9, -0.9510565077387533, 0), (-0.42797543482044426, 0.8930285514518761, -0.13905766243546627, 0), (0.8493206156113752, 0.45000000699084935, 0.2759610218957579, 0), (4.246603012084963, 2.2500000000000004, 1.3798050880432131, 1.0000000000000004) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam5"
    {
        float4[] clippingPlanes.timeSamples = {
            5: [],
        }
        float2 clippingRange.timeSamples = {
            5: (1, 1000000),
        }
        float focalLength.timeSamples = {
            5: 50,
        }
        float focusDistance.timeSamples = {
            5: 0,
        }
        float fStop.timeSamples = {
            5: 0,
        }
        float horizontalAperture.timeSamples = {
            5: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            5: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            5: "perspective",
        }
        float verticalAperture.timeSamples = {
            5: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            5: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            5: ( (0.3090170126167033, 1.8755200170694764e-10, -0.9510565103680477, 0), (-0.5230810604475451, 0.8351646684833777, -0.16995935019327887, 0), (0.7942887951586124, 0.5499999786518631, 0.2580800909958576, 0), (3.971444129943849, 2.75, 1.2904005050659182, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam6"
    {
        float4[] clippingPlanes.timeSamples = {
            6: [],
        }
        float2 clippingRange.timeSamples = {
            6: (1, 1000000),
        }
        float focalLength.timeSamples = {
            6: 50,
        }
        float focusDistance.timeSamples = {
            6: 0,
        }
        float fStop.timeSamples = {
            6: 0,
        }
        float horizontalAperture.timeSamples = {
            6: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            6: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            6: "perspective",
        }
        float verticalAperture.timeSamples = {
            6: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            6: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            6: ( (0.3090169772746826, 1.1344787054223815e-8, -0.9510565218513664, 0), (-0.6181867769666834, 0.7599341761119263, -0.20086103843361916, 0), (0.7227403520902663, 0.650000036905451, 0.23483256904303101, 0), (3.613701820373535, 3.25000023841858, 1.1741628646850588, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam7"
    {
        float4[] clippingPlanes.timeSamples = {
            7: [],
        }
        float2 clippingRange.timeSamples = {
            7: (1, 1000000),
        }
        float focalLength.timeSamples = {
            7: 50,
        }
        float focusDistance.timeSamples = {
            7: 0,
        }
        float fStop.timeSamples = {
            7: 0,
        }
        float horizontalAperture.timeSamples = {
            7: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            7: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            7: "perspective",
        }
        float verticalAperture.timeSamples = {
            7: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            7: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            7: ( (0.30901700439119545, -3.0630387115593286e-9, -0.9510565130406772, 0), (-0.7132923861918224, 0.6614378253370822, -0.23176275588223313, 0), (0.6290647524681922, 0.7500000021422343, 0.20439553319184972, 0), (3.1453237533569327, 3.7499999999999996, 1.0219776630401611, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam8"
    {
        float4[] clippingPlanes.timeSamples = {
            8: [],
        }
        float2 clippingRange.timeSamples = {
            8: (1, 1000000),
        }
        float focalLength.timeSamples = {
            8: 50,
        }
        float focusDistance.timeSamples = {
            8: 0,
        }
        float fStop.timeSamples = {
            8: 0,
        }
        float horizontalAperture.timeSamples = {
            8: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            8: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            8: "perspective",
        }
        float verticalAperture.timeSamples = {
            8: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            8: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            8: ( (0.30901703093556515, -1.4203694193026809e-8, -0.951056504415888, 0), (-0.8083980206076058, 0.5267826975402201, -0.26266448151578126, 0), (0.5010001146401797, 0.8499999938660288, 0.1627848136598684, 0), (2.5050005912780757, 4.249999999999999, 0.8139240741729735, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam9"
    {
        float4[] clippingPlanes.timeSamples = {
            9: [],
        }
        float2 clippingRange.timeSamples = {
            9: (1, 1000000),
        }
        float focalLength.timeSamples = {
            9: 50,
        }
        float focusDistance.timeSamples = {
            9: 0,
        }
        float fStop.timeSamples = {
            9: 0,
        }
        float horizontalAperture.timeSamples = {
            9: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            9: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            9: "perspective",
        }
        float verticalAperture.timeSamples = {
            9: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            9: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            9: ( (0.30901698870169003, -3.0489758356955213e-9, -0.9510565181385066, 0), (-0.9035037307610833, 0.31224977572266965, -0.29356615278663556, 0), (0.29696718538340794, 0.950000040821653, 0.09649048266183641, 0), (1.4848358631134035, 4.750000000000001, 0.482452392578125, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam10"
    {
        float4[] clippingPlanes.timeSamples = {
            10: [],
        }
        float2 clippingRange.timeSamples = {
            10: (1, 1000000),
        }
        float focalLength.timeSamples = {
            10: 50,
        }
        float focusDistance.timeSamples = {
            10: 0,
        }
        float fStop.timeSamples = {
            10: 0,
        }
        float horizontalAperture.timeSamples = {
            10: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            10: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            10: "perspective",
        }
        float verticalAperture.timeSamples = {
            10: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            10: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            10: ( (0.8090170598776013, -1.5551646775913145e-11, -0.5877851621357943, 0), (-0.02938925858419033, 0.9987492177301779, -0.040450853677390736, 0), (0.5870499708771593, 0.0500000008335808, 0.8080051556826655, 0), (2.9352498054504395, 0.25, 4.04002571105957, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam11"
    {
        float4[] clippingPlanes.timeSamples = {
            11: [],
        }
        float2 clippingRange.timeSamples = {
            11: (1, 1000000),
        }
        float focalLength.timeSamples = {
            11: 50,
        }
        float focusDistance.timeSamples = {
            11: 0,
        }
        float fStop.timeSamples = {
            11: 0,
        }
        float horizontalAperture.timeSamples = {
            11: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            11: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            11: "perspective",
        }
        float verticalAperture.timeSamples = {
            11: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            11: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            11: ( (0.809017055704726, -7.07782506215171e-9, -0.5877851678792655, 0), (-0.08816776633366093, 0.9886859974868565, -0.12135255808244316, 0), (0.5811349658716032, 0.14999999457806565, 0.7998638340792706, 0), (2.9056749343872066, 0.7499999999999999, 3.999319314956665, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam12"
    {
        float4[] clippingPlanes.timeSamples = {
            12: [],
        }
        float2 clippingRange.timeSamples = {
            12: (1, 1000000),
        }
        float focalLength.timeSamples = {
            12: 50,
        }
        float focusDistance.timeSamples = {
            12: 0,
        }
        float fStop.timeSamples = {
            12: 0,
        }
        float horizontalAperture.timeSamples = {
            12: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            12: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            12: "perspective",
        }
        float verticalAperture.timeSamples = {
            12: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            12: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            12: ( (0.8090170270710801, -1.0114335147193286e-8, -0.5877852072901042, 0), (-0.1469462900150215, 0.9682458382582889, -0.2022542571772575, 0), (0.5691205827940965, 0.24999999339100581, 0.7833273680554029, 0), (2.845602989196777, 1.25, 3.9166369438171373, 0.9999999999999998) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam13"
    {
        float4[] clippingPlanes.timeSamples = {
            13: [],
        }
        float2 clippingRange.timeSamples = {
            13: (1, 1000000),
        }
        float focalLength.timeSamples = {
            13: 50,
        }
        float focusDistance.timeSamples = {
            13: 0,
        }
        float fStop.timeSamples = {
            13: 0,
        }
        float horizontalAperture.timeSamples = {
            13: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            13: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            13: "perspective",
        }
        float verticalAperture.timeSamples = {
            13: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            13: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            13: ( (0.8090170174334714, -6.485467302086436e-9, -0.5877852205551364, 0), (-0.20572483363355018, 0.9367496925423073, -0.2831559753004357, 0), (0.5506076264723351, 0.35000001931698915, 0.757846441008077, 0), (2.7530381679534908, 1.7500001192092898, 3.78923225402832, 0.9999999999999999) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam14"
    {
        float4[] clippingPlanes.timeSamples = {
            14: [],
        }
        float2 clippingRange.timeSamples = {
            14: (1, 1000000),
        }
        float focalLength.timeSamples = {
            14: 50,
        }
        float focusDistance.timeSamples = {
            14: 0,
        }
        float fStop.timeSamples = {
            14: 0,
        }
        float horizontalAperture.timeSamples = {
            14: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            14: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            14: "perspective",
        }
        float verticalAperture.timeSamples = {
            14: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            14: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            14: ( (0.8090170432205656, -9.057556926705958e-9, -0.5877851850622419, 0), (-0.2645033210930293, 0.8930285598106704, -0.3640576664393128, 0), (0.5249089605916551, 0.4499999904027555, 0.7224753225737943, 0), (2.624544858932495, 2.25, 3.6123766899108887, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam15"
    {
        float4[] clippingPlanes.timeSamples = {
            15: [],
        }
        float2 clippingRange.timeSamples = {
            15: (1, 1000000),
        }
        float focalLength.timeSamples = {
            15: 50,
        }
        float focusDistance.timeSamples = {
            15: 0,
        }
        float fStop.timeSamples = {
            15: 0,
        }
        float horizontalAperture.timeSamples = {
            15: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            15: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            15: "perspective",
        }
        float verticalAperture.timeSamples = {
            15: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            15: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            15: ( (0.8090170486409729, 9.646407422847503e-9, -0.5877851776016896, 0), (-0.3232818465583502, 0.8351646629846663, -0.44495936150117366, 0), (0.4908974054668379, 0.5499999870015532, 0.6756624538955959, 0), (2.4544870853424072, 2.75, 3.3783123493194585, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam16"
    {
        float4[] clippingPlanes.timeSamples = {
            16: [],
        }
        float2 clippingRange.timeSamples = {
            16: (1, 1000000),
        }
        float focalLength.timeSamples = {
            16: 50,
        }
        float focusDistance.timeSamples = {
            16: 0,
        }
        float fStop.timeSamples = {
            16: 0,
        }
        float horizontalAperture.timeSamples = {
            16: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            16: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            16: "perspective",
        }
        float verticalAperture.timeSamples = {
            16: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            16: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            16: ( (0.8090170595645434, -1.8195692397249275e-8, -0.5877851625666811, 0), (-0.3820603582547244, 0.7599341876361164, -0.5258611158016036, 0), (0.44667804958808055, 0.6500000234321808, 0.6147997149920882, 0), (2.2333903312683105, 3.2500002384185795, 3.0739986896514897, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam17"
    {
        float4[] clippingPlanes.timeSamples = {
            17: [],
        }
        float2 clippingRange.timeSamples = {
            17: (1, 1000000),
        }
        float focalLength.timeSamples = {
            17: 50,
        }
        float focusDistance.timeSamples = {
            17: 0,
        }
        float fStop.timeSamples = {
            17: 0,
        }
        float horizontalAperture.timeSamples = {
            17: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            17: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            17: "perspective",
        }
        float verticalAperture.timeSamples = {
            17: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            17: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            17: ( (0.8090170518403437, 1.1622521361998036e-8, -0.5877851731981324, 0), (-0.44083888880448024, 0.6614378225836308, -0.606762788059268, 0), (0.38878333805500154, 0.7500000045705498, 0.5351144823259647, 0), (1.94391667842865, 3.7499999999999996, 2.675572395324707, 0.9999999999999998) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam18"
    {
        float4[] clippingPlanes.timeSamples = {
            18: [],
        }
        float2 clippingRange.timeSamples = {
            18: (1, 1000000),
        }
        float focalLength.timeSamples = {
            18: 50,
        }
        float focusDistance.timeSamples = {
            18: 0,
        }
        float fStop.timeSamples = {
            18: 0,
        }
        float horizontalAperture.timeSamples = {
            18: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            18: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            18: "perspective",
        }
        float verticalAperture.timeSamples = {
            18: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            18: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            18: ( (0.8090170265327021, 6.471770785942967e-9, -0.5877852080311183, 0), (-0.4996174296771308, 0.5267826873885286, -0.6876644706763154, 0), (0.30963506704345106, 0.8500000001574823, 0.4261761666133829, 0), (1.5481753349304201, 4.25, 2.130880832672119, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam19"
    {
        float4[] clippingPlanes.timeSamples = {
            19: [],
        }
        float2 clippingRange.timeSamples = {
            19: (1, 1000000),
        }
        float focalLength.timeSamples = {
            19: 50,
        }
        float focusDistance.timeSamples = {
            19: 0,
        }
        float fStop.timeSamples = {
            19: 0,
        }
        float horizontalAperture.timeSamples = {
            19: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            19: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            19: "perspective",
        }
        float verticalAperture.timeSamples = {
            19: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            19: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            19: ( (0.8090170450530304, -1.651642989042301e-10, -0.5877851825400694, 0), (-0.5583959524263559, 0.31224974952822493, -0.7685662328214943, 0), (0.18353577615147834, 0.9500000494313464, 0.2526153695896464, 0), (0.9176788330078123, 4.75, 1.2630767822265625, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam20"
    {
        float4[] clippingPlanes.timeSamples = {
            20: [],
        }
        float2 clippingRange.timeSamples = {
            20: (1, 1000000),
        }
        float focalLength.timeSamples = {
            20: 50,
        }
        float focusDistance.timeSamples = {
            20: 0,
        }
        float fStop.timeSamples = {
            20: 0,
        }
        float horizontalAperture.timeSamples = {
            20: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            20: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            20: "perspective",
        }
        float verticalAperture.timeSamples = {
            20: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            20: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            20: ( (0.9999999999999988, -1.5304335468571457e-16, 4.371139079559779e-8, 0), (2.185569817065054e-9, 0.9987492176293953, -0.05000000284670035, 0), (-4.36567173509439e-8, 0.050000002846700406, 0.9987492176293945, 0), (-2.1828357432696066e-7, 0.2499999999999999, 4.993745803833006, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam21"
    {
        float4[] clippingPlanes.timeSamples = {
            21: [],
        }
        float2 clippingRange.timeSamples = {
            21: (1, 1000000),
        }
        float focalLength.timeSamples = {
            21: 50,
        }
        float focusDistance.timeSamples = {
            21: 0,
        }
        float fStop.timeSamples = {
            21: 0,
        }
        float horizontalAperture.timeSamples = {
            21: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            21: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            21: "perspective",
        }
        float verticalAperture.timeSamples = {
            21: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            21: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            21: ( (0.9999999999999993, 6.8030126138109e-17, 4.371139173515773e-8, 0), (6.556708740234383e-9, 0.9886859965003613, -0.15000000108029393, 0), (-4.3216840906296585e-8, 0.15000000108029404, 0.9886859965003602, 0), (-2.1608420297525302e-7, 0.75, 4.943429946899414, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam22"
    {
        float4[] clippingPlanes.timeSamples = {
            22: [],
        }
        float2 clippingRange.timeSamples = {
            22: (1, 1000000),
        }
        float focalLength.timeSamples = {
            22: 50,
        }
        float focusDistance.timeSamples = {
            22: 0,
        }
        float fStop.timeSamples = {
            22: 0,
        }
        float horizontalAperture.timeSamples = {
            22: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            22: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            22: "perspective",
        }
        float verticalAperture.timeSamples = {
            22: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            22: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            22: ( (0.999999999999999, -2.4661735001659496e-16, 4.3711386384280945e-8, 0), (1.0927846293069822e-8, 0.9682458397521347, -0.2499999876053657, 0), (-4.23233679547238e-8, 0.24999998760536596, 0.9682458397521339, 0), (-2.116168502652726e-7, 1.2499999999999998, 4.841229438781737, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam23"
    {
        float4[] clippingPlanes.timeSamples = {
            23: [],
        }
        float2 clippingRange.timeSamples = {
            23: (1, 1000000),
        }
        float focalLength.timeSamples = {
            23: 50,
        }
        float focusDistance.timeSamples = {
            23: 0,
        }
        float fStop.timeSamples = {
            23: 0,
        }
        float horizontalAperture.timeSamples = {
            23: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            23: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            23: "perspective",
        }
        float verticalAperture.timeSamples = {
            23: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            23: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            23: ( (0.9999999999999991, -5.179420621520019e-16, 4.3711392043389626e-8, 0), (1.5298989341633243e-8, 0.9367496857307013, -0.35000003754775855, 0), (-4.094663257821697e-8, 0.3500000375477589, 0.9367496857307004, 0), (-2.047331548737929e-7, 1.7500001192092896, 4.683748245239258, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam24"
    {
        float4[] clippingPlanes.timeSamples = {
            24: [],
        }
        float2 clippingRange.timeSamples = {
            24: (1, 1000000),
        }
        float focalLength.timeSamples = {
            24: 50,
        }
        float focusDistance.timeSamples = {
            24: 0,
        }
        float fStop.timeSamples = {
            24: 0,
        }
        float horizontalAperture.timeSamples = {
            24: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            24: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            24: "perspective",
        }
        float verticalAperture.timeSamples = {
            24: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            24: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            24: ( (0.9999999999999991, -8.518027519076896e-16, 4.371138959634559e-8, 0), (1.9670126247584396e-8, 0.8930285530316108, -0.45000000385585287, 0), (-3.9035518618914254e-8, 0.4500000038558533, 0.89302855303161, 0), (-1.9517759142217988e-7, 2.2499999999999996, 4.465142726898193, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam25"
    {
        float4[] clippingPlanes.timeSamples = {
            25: [],
        }
        float2 clippingRange.timeSamples = {
            25: (1, 1000000),
        }
        float focalLength.timeSamples = {
            25: 50,
        }
        float focusDistance.timeSamples = {
            25: 0,
        }
        float fStop.timeSamples = {
            25: 0,
        }
        float horizontalAperture.timeSamples = {
            25: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            25: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            25: "perspective",
        }
        float verticalAperture.timeSamples = {
            25: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            25: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            25: ( (0.9999999999999989, -4.155150926961981e-16, 4.371139079951364e-8, 0), (2.404126552951446e-8, 0.8351646507671213, -0.5500000055536648, 0), (-3.6506208203087686e-8, 0.5500000055536653, 0.8351646507671207, 0), (-1.8253103917231783e-7, 2.7499999999999996, 4.175823211669922, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam26"
    {
        float4[] clippingPlanes.timeSamples = {
            26: [],
        }
        float2 clippingRange.timeSamples = {
            26: (1, 1000000),
        }
        float focalLength.timeSamples = {
            26: 50,
        }
        float focusDistance.timeSamples = {
            26: 0,
        }
        float fStop.timeSamples = {
            26: 0,
        }
        float horizontalAperture.timeSamples = {
            26: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            26: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            26: "perspective",
        }
        float verticalAperture.timeSamples = {
            26: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            26: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            26: ( (0.999999999999999, 6.624654672817682e-16, 4.371138501654575e-8, 0), (2.8412401408896002e-8, 0.7599341753608532, -0.650000037783552, 0), (-3.3217775757032035e-8, 0.6500000377835526, 0.7599341753608525, 0), (-1.660888813148631e-7, 3.2500002384185787, 3.7996709346771245, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam27"
    {
        float4[] clippingPlanes.timeSamples = {
            27: [],
        }
        float2 clippingRange.timeSamples = {
            27: (1, 1000000),
        }
        float focalLength.timeSamples = {
            27: 50,
        }
        float focusDistance.timeSamples = {
            27: 0,
        }
        float fStop.timeSamples = {
            27: 0,
        }
        float horizontalAperture.timeSamples = {
            27: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            27: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            27: "perspective",
        }
        float verticalAperture.timeSamples = {
            27: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            27: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            27: ( (0.9999999999999989, -8.95267089543186e-16, 4.3711389865662314e-8, 0), (3.2783543646703846e-8, 0.6614378107675318, -0.7500000149913688, 0), (-2.8912365346899433e-8, 0.7500000149913697, 0.6614378107675313, 0), (-1.4456182384492425e-7, 3.75, 3.3071889877319336, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam28"
    {
        float4[] clippingPlanes.timeSamples = {
            28: [],
        }
        float2 clippingRange.timeSamples = {
            28: (1, 1000000),
        }
        float focalLength.timeSamples = {
            28: 50,
        }
        float focusDistance.timeSamples = {
            28: 0,
        }
        float fStop.timeSamples = {
            28: 0,
        }
        float horizontalAperture.timeSamples = {
            28: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            28: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            28: "perspective",
        }
        float verticalAperture.timeSamples = {
            28: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            28: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            28: ( (0.999999999999999, -1.0092248177716358e-15, 4.371138768910405e-8, 0), (3.715467975897722e-8, 0.526782699027085, -0.8499999929445516, 0), (-2.302640192724444e-8, 0.8499999929445525, 0.5267826990270845, 0), (-1.1513201059187847e-7, 4.25, 2.6339135169982906, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam29"
    {
        float4[] clippingPlanes.timeSamples = {
            29: [],
        }
        float2 clippingRange.timeSamples = {
            29: (1, 1000000),
        }
        float focalLength.timeSamples = {
            29: 50,
        }
        float focusDistance.timeSamples = {
            29: 0,
        }
        float fStop.timeSamples = {
            29: 0,
        }
        float horizontalAperture.timeSamples = {
            29: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            29: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            29: "perspective",
        }
        float verticalAperture.timeSamples = {
            29: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            29: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            29: ( (0.9999999999999989, -2.0052049370347198e-15, 4.371139602953204e-8, 0), (4.152582872213161e-8, 0.3122497699052696, -0.9500000427337381, 0), (-1.3648871447514718e-8, 0.950000042733739, 0.3122497699052693, 0), (-6.824435416774576e-8, 4.749999999999999, 1.5612487792968748, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam30"
    {
        float4[] clippingPlanes.timeSamples = {
            30: [],
        }
        float2 clippingRange.timeSamples = {
            30: (1, 1000000),
        }
        float focalLength.timeSamples = {
            30: 50,
        }
        float focusDistance.timeSamples = {
            30: 0,
        }
        float fStop.timeSamples = {
            30: 0,
        }
        float horizontalAperture.timeSamples = {
            30: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            30: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            30: "perspective",
        }
        float verticalAperture.timeSamples = {
            30: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            30: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            30: ( (0.8090168804353428, 1.8613199731509766e-9, 0.5877854091168532, 0), (0.029389269857743608, 0.9987492176947557, -0.04045084636125978, 0), (-0.5870502176031409, 0.05000000154113514, 0.8080049763819472, 0), (-2.9352509975433354, 0.25, 4.040024757385254, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam31"
    {
        float4[] clippingPlanes.timeSamples = {
            31: [],
        }
        float2 clippingRange.timeSamples = {
            31: (1, 1000000),
        }
        float focalLength.timeSamples = {
            31: 50,
        }
        float focusDistance.timeSamples = {
            31: 0,
        }
        float fStop.timeSamples = {
            31: 0,
        }
        float horizontalAperture.timeSamples = {
            31: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            31: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            31: "perspective",
        }
        float verticalAperture.timeSamples = {
            31: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            31: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            31: ( (0.809016890306415, -1.1935286509112686e-9, 0.5877853955304932, 0), (0.08816780496963746, 0.9886859980360392, -0.1213525255374486, 0), (-0.581135190266236, 0.14999999095827019, 0.7998636717258414, 0), (-2.9056761264801025, 0.7500000000000001, 3.999318599700928, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam32"
    {
        float4[] clippingPlanes.timeSamples = {
            32: [],
        }
        float2 clippingRange.timeSamples = {
            32: (1, 1000000),
        }
        float focalLength.timeSamples = {
            32: 50,
        }
        float focusDistance.timeSamples = {
            32: 0,
        }
        float fStop.timeSamples = {
            32: 0,
        }
        float horizontalAperture.timeSamples = {
            32: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            32: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            32: "perspective",
        }
        float verticalAperture.timeSamples = {
            32: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            32: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            32: ( (0.8090168417419207, 8.943031606922783e-9, 0.5877854623737542, 0), (0.14694635671938625, 0.9682458373727401, -0.2022542129530575, 0), (-0.5691208290203645, 0.24999999682072352, 0.7833271880669096, 0), (-2.8456041812896733, 1.25, 3.9166359901428227, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam33"
    {
        float4[] clippingPlanes.timeSamples = {
            33: [],
        }
        float2 clippingRange.timeSamples = {
            33: (1, 1000000),
        }
        float focalLength.timeSamples = {
            33: 50,
        }
        float focusDistance.timeSamples = {
            33: 0,
        }
        float fStop.timeSamples = {
            33: 0,
        }
        float horizontalAperture.timeSamples = {
            33: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            33: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            33: "perspective",
        }
        float verticalAperture.timeSamples = {
            33: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            33: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            33: ( (0.8090168878063675, -1.286230236208219e-8, 0.5877853989715117, 0), (0.20572491684078684, 0.9367496886654951, -0.2831559276722796, 0), (-0.5506077858466504, 0.3500000296929955, 0.7578463204238387, 0), (-2.753038883209229, 1.7500001192092898, 3.789231538772584, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam34"
    {
        float4[] clippingPlanes.timeSamples = {
            34: [],
        }
        float2 clippingRange.timeSamples = {
            34: (1, 1000000),
        }
        float focalLength.timeSamples = {
            34: 50,
        }
        float focusDistance.timeSamples = {
            34: 0,
        }
        float fStop.timeSamples = {
            34: 0,
        }
        float horizontalAperture.timeSamples = {
            34: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            34: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            34: "perspective",
        }
        float verticalAperture.timeSamples = {
            34: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            34: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            34: ( (0.8090168934815402, 9.817183677096608e-9, 0.5877853911603097, 0), (0.2645034298759864, 0.8930285455902329, -0.36405762228640726, 0), (-0.524909136561098, 0.4500000186233253, 0.7224751771470694, 0), (-2.624545574188233, 2.2499999999999996, 3.6123757362365727, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam35"
    {
        float4[] clippingPlanes.timeSamples = {
            35: [],
        }
        float2 clippingRange.timeSamples = {
            35: (1, 1000000),
        }
        float focalLength.timeSamples = {
            35: 50,
        }
        float focusDistance.timeSamples = {
            35: 0,
        }
        float fStop.timeSamples = {
            35: 0,
        }
        float horizontalAperture.timeSamples = {
            35: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            35: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            35: "perspective",
        }
        float verticalAperture.timeSamples = {
            35: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            35: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            35: ( (0.809016875653658, -2.310250035719718e-8, 0.587785415698274, 0), (0.3232819875805271, 0.835164661889719, -0.44495926109770406, 0), (-0.4908975976856856, 0.5499999886642094, 0.6756623128869866, 0), (-2.454488039016723, 2.7500000000000004, 3.3783116340637203, 0.9999999999999998) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam36"
    {
        float4[] clippingPlanes.timeSamples = {
            36: [],
        }
        float2 clippingRange.timeSamples = {
            36: (1, 1000000),
        }
        float focalLength.timeSamples = {
            36: 50,
        }
        float focusDistance.timeSamples = {
            36: 0,
        }
        float fStop.timeSamples = {
            36: 0,
        }
        float horizontalAperture.timeSamples = {
            36: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            36: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            36: "perspective",
        }
        float verticalAperture.timeSamples = {
            36: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            36: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            36: ( (0.809016845134683, 1.5609586956344401e-9, 0.58778545770402, 0), (0.3820605725724248, 0.7599341698080582, -0.5258609858544065, 0), (-0.4466782546464013, 0.650000044275489, 0.6147995439717789, 0), (-2.233391284942627, 3.25000023841858, 3.0739977359771724, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam37"
    {
        float4[] clippingPlanes.timeSamples = {
            37: [],
        }
        float2 clippingRange.timeSamples = {
            37: (1, 1000000),
        }
        float focalLength.timeSamples = {
            37: 50,
        }
        float focusDistance.timeSamples = {
            37: 0,
        }
        float fStop.timeSamples = {
            37: 0,
        }
        float horizontalAperture.timeSamples = {
            37: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            37: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            37: "perspective",
        }
        float verticalAperture.timeSamples = {
            37: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            37: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            37: ( (0.8090168507364297, -2.1223356766464363e-8, 0.5877854499938808, 0), (0.44083910668056153, 0.6614378126647583, -0.6067626405756574, 0), (-0.3887835094825832, 0.7500000133181728, 0.5351143455161208, 0), (-1.9439175128936763, 3.749999999999999, 2.675571680068969, 0.9999999999999999) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam38"
    {
        float4[] clippingPlanes.timeSamples = {
            38: [],
        }
        float2 clippingRange.timeSamples = {
            38: (1, 1000000),
        }
        float focalLength.timeSamples = {
            38: 50,
        }
        float focusDistance.timeSamples = {
            38: 0,
        }
        float fStop.timeSamples = {
            38: 0,
        }
        float horizontalAperture.timeSamples = {
            38: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            38: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            38: "perspective",
        }
        float verticalAperture.timeSamples = {
            38: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            38: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            38: ( (0.8090168982120041, 4.665918901247681e-9, 0.5877853846493872, 0), (0.49961756676752556, 0.5267827101418829, -0.6876643536441821, 0), (-0.3096351811159794, 0.8499999860562196, 0.42617611185952425, 0), (-1.5481759309768683, 4.250000000000001, 2.1308805942535405, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam39"
    {
        float4[] clippingPlanes.timeSamples = {
            39: [],
        }
        float2 clippingRange.timeSamples = {
            39: (1, 1000000),
        }
        float focalLength.timeSamples = {
            39: 50,
        }
        float focusDistance.timeSamples = {
            39: 0,
        }
        float fStop.timeSamples = {
            39: 0,
        }
        float horizontalAperture.timeSamples = {
            39: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            39: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            39: "perspective",
        }
        float verticalAperture.timeSamples = {
            39: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            39: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            39: ( (0.8090169045913078, -2.7172788186202723e-9, 0.5877853758690316, 0), (0.5583961328498002, 0.3122497700630011, -0.7685660933933992, 0), (-0.18353584637309137, 0.9500000426818953, 0.25261534395303475, 0), (-0.9176791906356809, 4.75, 1.263076663017273, 0.9999999999999999) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam40"
    {
        float4[] clippingPlanes.timeSamples = {
            40: [],
        }
        float2 clippingRange.timeSamples = {
            40: (1, 1000000),
        }
        float focalLength.timeSamples = {
            40: 50,
        }
        float focusDistance.timeSamples = {
            40: 0,
        }
        float fStop.timeSamples = {
            40: 0,
        }
        float horizontalAperture.timeSamples = {
            40: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            40: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            40: "perspective",
        }
        float verticalAperture.timeSamples = {
            40: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            40: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            40: ( (0.30901677689581647, 3.3325711461251744e-10, 0.9510565869583794, 0), (0.04755282747160475, 0.9987492178652623, -0.015450838585108808, 0), (-0.9498670223754362, 0.0499999981352729, 0.30863026421609363, 0), (-4.749335289001466, 0.25, 1.543151378631592, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam41"
    {
        float4[] clippingPlanes.timeSamples = {
            41: [],
        }
        float2 clippingRange.timeSamples = {
            41: (1, 1000000),
        }
        float focalLength.timeSamples = {
            41: 50,
        }
        float focusDistance.timeSamples = {
            41: 0,
        }
        float fStop.timeSamples = {
            41: 0,
        }
        float horizontalAperture.timeSamples = {
            41: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            41: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            41: "perspective",
        }
        float verticalAperture.timeSamples = {
            41: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            41: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            41: ( (0.3090167871902991, 1.5184090235154098e-9, 0.9510565836135015, 0), (0.1426584815158474, 0.9886859975515763, -0.046352517699008694, 0), (-0.940296327168291, 0.14999999415148085, 0.3055205702868101, 0), (-4.701481819152832, 0.7499999999999999, 1.5276029109954832, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam42"
    {
        float4[] clippingPlanes.timeSamples = {
            42: [],
        }
        float2 clippingRange.timeSamples = {
            42: (1, 1000000),
        }
        float focalLength.timeSamples = {
            42: 50,
        }
        float focusDistance.timeSamples = {
            42: 0,
        }
        float fStop.timeSamples = {
            42: 0,
        }
        float horizontalAperture.timeSamples = {
            42: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            42: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            42: "perspective",
        }
        float verticalAperture.timeSamples = {
            42: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            42: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            42: ( (0.3090168001579592, -3.1335019301526038e-9, 0.9510565794000563, 0), (0.23776414624501083, 0.9682458364276655, -0.07725419730261501, 0), (-0.9208565729691661, 0.25000000048098053, 0.29920423088417836, 0), (-4.604282855987549, 1.25, 1.4960211515426636, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam43"
    {
        float4[] clippingPlanes.timeSamples = {
            43: [],
        }
        float2 clippingRange.timeSamples = {
            43: (1, 1000000),
        }
        float focalLength.timeSamples = {
            43: 50,
        }
        float focusDistance.timeSamples = {
            43: 0,
        }
        float fStop.timeSamples = {
            43: 0,
        }
        float horizontalAperture.timeSamples = {
            43: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            43: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            43: "perspective",
        }
        float verticalAperture.timeSamples = {
            43: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            43: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            43: ( (0.30901679865418435, -1.5240048528708523e-9, 0.9510565798886621, 0), (0.3328698293580089, 0.9367496895627478, -0.10815588660477729, 0), (-0.890901955802483, 0.3500000272915638, 0.28947139071627664, 0), (-4.454509735107422, 1.7500001192092893, 1.4473569393157963, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam44"
    {
        float4[] clippingPlanes.timeSamples = {
            44: [],
        }
        float2 clippingRange.timeSamples = {
            44: (1, 1000000),
        }
        float focalLength.timeSamples = {
            44: 50,
        }
        float focusDistance.timeSamples = {
            44: 0,
        }
        float fStop.timeSamples = {
            44: 0,
        }
        float horizontalAperture.timeSamples = {
            44: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            44: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            44: "perspective",
        }
        float verticalAperture.timeSamples = {
            44: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            44: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            44: ( (0.30901679733874804, 3.63351324028649e-9, 0.9510565803160731, 0), (0.42797545464991, 0.8930285578831791, -0.1390575601047716, 0), (-0.8493206868902381, 0.44999999422787695, 0.27596082333404626, 0), (-4.246603488922119, 2.25, 1.3798041343688963, 0.9999999999999999) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam45"
    {
        float4[] clippingPlanes.timeSamples = {
            45: [],
        }
        float2 clippingRange.timeSamples = {
            45: (1, 1000000),
        }
        float focalLength.timeSamples = {
            45: 50,
        }
        float focusDistance.timeSamples = {
            45: 0,
        }
        float fStop.timeSamples = {
            45: 0,
        }
        float horizontalAperture.timeSamples = {
            45: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            45: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            45: "perspective",
        }
        float verticalAperture.timeSamples = {
            45: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            45: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            45: ( (0.3090167953033752, 9.452989085945168e-9, 0.9510565809774054, 0), (0.5230811027317409, 0.8351646643722863, -0.16995924025740042, 0), (-0.7942888518576716, 0.5499999848944787, 0.25807990319026286, 0), (-3.9714443683624276, 2.750000000000001, 1.290399551391602, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam46"
    {
        float4[] clippingPlanes.timeSamples = {
            46: [],
        }
        float2 clippingRange.timeSamples = {
            46: (1, 1000000),
        }
        float focalLength.timeSamples = {
            46: 50,
        }
        float focusDistance.timeSamples = {
            46: 0,
        }
        float fStop.timeSamples = {
            46: 0,
        }
        float horizontalAperture.timeSamples = {
            46: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            46: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            46: "perspective",
        }
        float verticalAperture.timeSamples = {
            46: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            46: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            46: ( (0.30901679558419404, -2.719462266487227e-9, 0.9510565808861617, 0), (0.6181868127760417, 0.7599341765955575, -0.20086092639393852, 0), (-0.7227403991452779, 0.6500000363400236, 0.2348324257876079, 0), (-3.613702058792114, 3.250000238418579, 1.1741621494293213, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam47"
    {
        float4[] clippingPlanes.timeSamples = {
            47: [],
        }
        float2 clippingRange.timeSamples = {
            47: (1, 1000000),
        }
        float focalLength.timeSamples = {
            47: 50,
        }
        float focusDistance.timeSamples = {
            47: 0,
        }
        float fStop.timeSamples = {
            47: 0,
        }
        float horizontalAperture.timeSamples = {
            47: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            47: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            47: "perspective",
        }
        float verticalAperture.timeSamples = {
            47: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            47: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            47: ( (0.30901679531306325, 1.0230773117569925e-8, 0.9510565809742575, 0), (0.7132924351368936, 0.6614378259809698, -0.23176260340712615, 0), (-0.6290647996756176, 0.7500000015743788, 0.2043953899859458, 0), (-3.1453239917755127, 3.7500000000000004, 1.021976947784424, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam48"
    {
        float4[] clippingPlanes.timeSamples = {
            48: [],
        }
        float2 clippingRange.timeSamples = {
            48: (1, 1000000),
        }
        float focalLength.timeSamples = {
            48: 50,
        }
        float focusDistance.timeSamples = {
            48: 0,
        }
        float fStop.timeSamples = {
            48: 0,
        }
        float horizontalAperture.timeSamples = {
            48: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            48: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            48: "perspective",
        }
        float verticalAperture.timeSamples = {
            48: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            48: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            48: ( (0.30901677658210885, -8.251531680159019e-10, 0.9510565870603089, 0), (0.8083980896768986, 0.5267827036903032, -0.26266425660807957, 0), (-0.5010001600773635, 0.8499999900545494, 0.16278469372063792, 0), (-2.505000829696655, 4.249999999999999, 0.8139234781265259, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam49"
    {
        float4[] clippingPlanes.timeSamples = {
            49: [],
        }
        float2 clippingRange.timeSamples = {
            49: (1, 1000000),
        }
        float focalLength.timeSamples = {
            49: 50,
        }
        float focusDistance.timeSamples = {
            49: 0,
        }
        float fStop.timeSamples = {
            49: 0,
        }
        float horizontalAperture.timeSamples = {
            49: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            49: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            49: "perspective",
        }
        float verticalAperture.timeSamples = {
            49: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            49: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            49: ( (0.3090167742820411, -5.416157175530679e-9, 0.9510565878076458, 0), (0.9035038034795058, 0.3122497574373621, -0.2935659484313114, 0), (-0.29696718726214333, 0.9500000468317401, 0.09649041770716203, 0), (-1.4848358631134035, 4.75, 0.4824520647525788, 0.9999999999999999) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam50"
    {
        float4[] clippingPlanes.timeSamples = {
            50: [],
        }
        float2 clippingRange.timeSamples = {
            50: (1, 1000000),
        }
        float focalLength.timeSamples = {
            50: 50,
        }
        float focusDistance.timeSamples = {
            50: 0,
        }
        float fStop.timeSamples = {
            50: 0,
        }
        float horizontalAperture.timeSamples = {
            50: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            50: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            50: "perspective",
        }
        float verticalAperture.timeSamples = {
            50: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            50: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            50: ( (-0.30901722165953555, 1.1008705405601832e-10, 0.951056442445884, 0), (0.0475528226997214, 0.998749217743302, 0.015450861154986792, 0), (-0.9498668779208538, 0.05000000057141819, -0.30863070840690476, 0), (-4.749334335327148, 0.25, -1.5431535243988035, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam51"
    {
        float4[] clippingPlanes.timeSamples = {
            51: [],
        }
        float2 clippingRange.timeSamples = {
            51: (1, 1000000),
        }
        float focalLength.timeSamples = {
            51: 50,
        }
        float focusDistance.timeSamples = {
            51: 0,
        }
        float fStop.timeSamples = {
            51: 0,
        }
        float horizontalAperture.timeSamples = {
            51: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            51: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            51: "perspective",
        }
        float verticalAperture.timeSamples = {
            51: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            51: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            51: ( (-0.3090172362989644, -1.0911095638110882e-10, 0.9510564376892416, 0), (0.1426584669384785, 0.9886859964539384, 0.046352585975824846, 0), (-0.9402961817857782, 0.1500000013862773, -0.30552101417611804, 0), (-4.701480865478516, 0.7499999999999999, -1.5276050567626953, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam52"
    {
        float4[] clippingPlanes.timeSamples = {
            52: [],
        }
        float2 clippingRange.timeSamples = {
            52: (1, 1000000),
        }
        float focalLength.timeSamples = {
            52: 50,
        }
        float focusDistance.timeSamples = {
            52: 0,
        }
        float fStop.timeSamples = {
            52: 0,
        }
        float horizontalAperture.timeSamples = {
            52: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            52: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            52: "perspective",
        }
        float verticalAperture.timeSamples = {
            52: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            52: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            52: ( (-0.30901723635644196, 4.4625002304510275e-9, 0.9510564376705659, 0), (0.23776412413713993, 0.9682458329181993, 0.07725430932861413, 0), (-0.9208564322998052, 0.25000001407308453, -0.2992046524630457, 0), (-4.604281902313233, 1.2500000000000002, -1.4960231781005862, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam53"
    {
        float4[] clippingPlanes.timeSamples = {
            53: [],
        }
        float2 clippingRange.timeSamples = {
            53: (1, 1000000),
        }
        float focalLength.timeSamples = {
            53: 50,
        }
        float focusDistance.timeSamples = {
            53: 0,
        }
        float fStop.timeSamples = {
            53: 0,
        }
        float horizontalAperture.timeSamples = {
            53: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            53: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            53: "perspective",
        }
        float verticalAperture.timeSamples = {
            53: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            53: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            53: ( (-0.3090172262739724, 3.1026743813056228e-9, 0.9510564409465612, 0), (0.33286980099147045, 0.9367496817816683, 0.10815604130071166, 0), (-0.8909018180775247, 0.35000004811705726, -0.28947178940998414, 0), (-4.454508781433105, 1.750000119209289, -1.4473588466644285, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam54"
    {
        float4[] clippingPlanes.timeSamples = {
            54: [],
        }
        float2 clippingRange.timeSamples = {
            54: (1, 1000000),
        }
        float focalLength.timeSamples = {
            54: 50,
        }
        float focusDistance.timeSamples = {
            54: 0,
        }
        float fStop.timeSamples = {
            54: 0,
        }
        float horizontalAperture.timeSamples = {
            54: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            54: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            54: "perspective",
        }
        float verticalAperture.timeSamples = {
            54: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            54: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            54: ( (-0.3090172169378068, 7.626672474114747e-9, 0.9510564439800681, 0), (0.4279754234985104, 0.8930285435286539, 0.1390577481637088, 0), (-0.8493205499205132, 0.45000002271454476, -0.2759611984312761, 0), (-4.246602535247804, 2.25, -1.3798059225082402, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam55"
    {
        float4[] clippingPlanes.timeSamples = {
            55: [],
        }
        float2 clippingRange.timeSamples = {
            55: (1, 1000000),
        }
        float focalLength.timeSamples = {
            55: 50,
        }
        float focusDistance.timeSamples = {
            55: 0,
        }
        float fStop.timeSamples = {
            55: 0,
        }
        float horizontalAperture.timeSamples = {
            55: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            55: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            55: "perspective",
        }
        float verticalAperture.timeSamples = {
            55: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            55: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            55: ( (-0.3090172128738612, 8.188146577436942e-9, 0.9510564453005254, 0), (0.5230810668482686, 0.8351646407004264, 0.16995946701671347, 0), (-0.7942887130335847, 0.5500000208397524, -0.25808025384310995, 0), (-3.971443414688111, 2.7500000000000004, -1.2904012203216557, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam56"
    {
        float4[] clippingPlanes.timeSamples = {
            56: [],
        }
        float2 clippingRange.timeSamples = {
            56: (1, 1000000),
        }
        float focalLength.timeSamples = {
            56: 50,
        }
        float focusDistance.timeSamples = {
            56: 0,
        }
        float fStop.timeSamples = {
            56: 0,
        }
        float horizontalAperture.timeSamples = {
            56: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            56: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            56: "perspective",
        }
        float verticalAperture.timeSamples = {
            56: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            56: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            56: ( (-0.30901722104629925, 1.207952543547109e-9, 0.9510564426451371, 0), (0.6181867414833124, 0.7599341595807579, 0.2008612101838776, 0), (-0.7227402782127665, 0.6500000562325264, -0.23483274291854095, 0), (-3.6137013435363774, 3.250000238418579, -1.1741636991500854, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam57"
    {
        float4[] clippingPlanes.timeSamples = {
            57: [],
        }
        float2 clippingRange.timeSamples = {
            57: (1, 1000000),
        }
        float focalLength.timeSamples = {
            57: 50,
        }
        float focusDistance.timeSamples = {
            57: 0,
        }
        float fStop.timeSamples = {
            57: 0,
        }
        float horizontalAperture.timeSamples = {
            57: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            57: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            57: "perspective",
        }
        float verticalAperture.timeSamples = {
            57: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            57: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            57: ( (-0.30901723284730964, 5.782216427885347e-9, 0.9510564388107532, 0), (0.7132923542633759, 0.661437799183891, 0.23176292878754717, 0), (-0.6290646764465498, 0.7500000252071802, -0.20439568252883125, 0), (-3.145323276519776, 3.7500000000000004, -1.0219783782958987, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam58"
    {
        float4[] clippingPlanes.timeSamples = {
            58: [],
        }
        float2 clippingRange.timeSamples = {
            58: (1, 1000000),
        }
        float focalLength.timeSamples = {
            58: 50,
        }
        float focusDistance.timeSamples = {
            58: 0,
        }
        float fStop.timeSamples = {
            58: 0,
        }
        float horizontalAperture.timeSamples = {
            58: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            58: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            58: "perspective",
        }
        float verticalAperture.timeSamples = {
            58: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            58: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            58: ( (-0.3090172262754937, 1.322008846837974e-8, 0.9510564409460669, 0), (0.8083979956283479, 0.5267826559633263, 0.2626646417778625, 0), (-0.501000034460148, 0.8500000196330723, -0.16278492588291787, 0), (-2.505000114440918, 4.249999999999999, -0.8139246106147765, 0.9999999999999998) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam59"
    {
        float4[] clippingPlanes.timeSamples = {
            59: [],
        }
        float2 clippingRange.timeSamples = {
            59: (1, 1000000),
        }
        float focalLength.timeSamples = {
            59: 50,
        }
        float focusDistance.timeSamples = {
            59: 0,
        }
        float fStop.timeSamples = {
            59: 0,
        }
        float horizontalAperture.timeSamples = {
            59: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            59: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            59: "perspective",
        }
        float verticalAperture.timeSamples = {
            59: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            59: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            59: ( (-0.3090172514307205, -6.732074453452693e-9, 0.9510564327726314, 0), (0.9035036558666092, 0.3122497547419954, 0.2935664056039707, 0), (-0.2969671398553621, 0.9500000477176638, -0.09649055488783413, 0), (-1.4848356246948242, 4.750000000000002, -0.48245275020599365, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam60"
    {
        float4[] clippingPlanes.timeSamples = {
            60: [],
        }
        float2 clippingRange.timeSamples = {
            60: (1, 1000000),
        }
        float focalLength.timeSamples = {
            60: 50,
        }
        float focusDistance.timeSamples = {
            60: 0,
        }
        float fStop.timeSamples = {
            60: 0,
        }
        float horizontalAperture.timeSamples = {
            60: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            60: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            60: "perspective",
        }
        float verticalAperture.timeSamples = {
            60: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            60: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            60: ( (-0.8090171382553399, 6.248127050467736e-10, 0.5877850542580515, 0), (0.02938925308843235, 0.9987492177829238, 0.040450856367974006, 0), (-0.5870498631394478, 0.04999999977998392, -0.8080052340238629, 0), (-2.9352493286132817, 0.25, -4.0400261878967285, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam61"
    {
        float4[] clippingPlanes.timeSamples = {
            61: [],
        }
        float2 clippingRange.timeSamples = {
            61: (1, 1000000),
        }
        float focalLength.timeSamples = {
            61: 50,
        }
        float focusDistance.timeSamples = {
            61: 0,
        }
        float fStop.timeSamples = {
            61: 0,
        }
        float horizontalAperture.timeSamples = {
            61: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            61: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            61: "perspective",
        }
        float verticalAperture.timeSamples = {
            61: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            61: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            61: ( (-0.8090171406968717, -1.7627263537711713e-9, 0.5877850508975694, 0), (0.08816775700456476, 0.9886859964629626, 0.12135257320231278, 0), (-0.5811348489666078, 0.15000000132679553, -0.7998639177500877, 0), (-2.90567421913147, 0.7500000000000001, -3.9993195533752437, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam62"
    {
        float4[] clippingPlanes.timeSamples = {
            62: [],
        }
        float2 clippingRange.timeSamples = {
            62: (1, 1000000),
        }
        float focalLength.timeSamples = {
            62: 50,
        }
        float focusDistance.timeSamples = {
            62: 0,
        }
        float fStop.timeSamples = {
            62: 0,
        }
        float horizontalAperture.timeSamples = {
            62: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            62: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            62: "perspective",
        }
        float verticalAperture.timeSamples = {
            62: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            62: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            62: ( (-0.8090171301526726, -2.185207334526318e-9, 0.5877850654104215, 0), (0.14694626174212833, 0.9682458378251981, 0.20225427979203336, 0), (-0.56912044356142, 0.24999999506836035, -0.7833274686785039, 0), (-2.84560227394104, 1.25, -3.9166374206542973, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam63"
    {
        float4[] clippingPlanes.timeSamples = {
            63: [],
        }
        float2 clippingRange.timeSamples = {
            63: (1, 1000000),
        }
        float focalLength.timeSamples = {
            63: 50,
        }
        float focusDistance.timeSamples = {
            63: 0,
        }
        float fStop.timeSamples = {
            63: 0,
        }
        float horizontalAperture.timeSamples = {
            63: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            63: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            63: "perspective",
        }
        float verticalAperture.timeSamples = {
            63: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            63: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            63: ( (-0.8090171241880068, -1.764581758489924e-9, 0.5877850736200834, 0), (0.2057247871193793, 0.9367496916934481, 0.2831560119031829, 0), (-0.5506074869952758, 0.3500000215888985, -0.7578465412948175, 0), (-2.7530374526977535, 1.7500001192092893, -3.7892327308654785, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam64"
    {
        float4[] clippingPlanes.timeSamples = {
            64: [],
        }
        float2 clippingRange.timeSamples = {
            64: (1, 1000000),
        }
        float focalLength.timeSamples = {
            64: 50,
        }
        float focusDistance.timeSamples = {
            64: 0,
        }
        float fStop.timeSamples = {
            64: 0,
        }
        float horizontalAperture.timeSamples = {
            64: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            64: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            64: "perspective",
        }
        float verticalAperture.timeSamples = {
            64: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            64: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            64: ( (-0.8090171571581488, -1.199151614117433e-8, 0.5877850282405525, 0), (0.26450325004035485, 0.8930285584074563, 0.3640577215041454, 0), (-0.5249088207887505, 0.44999999318744466, -0.7224754224120452, 0), (-2.624544143676758, 2.25, -3.6123771667480473, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam65"
    {
        float4[] clippingPlanes.timeSamples = {
            65: [],
        }
        float2 clippingRange.timeSamples = {
            65: (1, 1000000),
        }
        float focalLength.timeSamples = {
            65: 50,
        }
        float focusDistance.timeSamples = {
            65: 0,
        }
        float fStop.timeSamples = {
            65: 0,
        }
        float horizontalAperture.timeSamples = {
            65: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            65: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            65: "perspective",
        }
        float verticalAperture.timeSamples = {
            65: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            65: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            65: ( (-0.8090171271894893, -2.0360643726569086e-9, 0.5877850694888954, 0), (0.32328178392202017, 0.835164657697385, 0.4449594169330565, 0), (-0.4908973172652931, 0.5499999950301905, -0.6756625114423093, 0), (-2.4544866085052495, 2.75, -3.378312587738038, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam66"
    {
        float4[] clippingPlanes.timeSamples = {
            66: [],
        }
        float2 clippingRange.timeSamples = {
            66: (1, 1000000),
        }
        float focalLength.timeSamples = {
            66: 50,
        }
        float focusDistance.timeSamples = {
            66: 0,
        }
        float fStop.timeSamples = {
            66: 0,
        }
        float horizontalAperture.timeSamples = {
            66: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            66: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            66: "perspective",
        }
        float verticalAperture.timeSamples = {
            66: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            66: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            66: ( (-0.8090171383556501, -1.3096611517493525e-8, 0.5877850541199855, 0), (0.38206029597403557, 0.7599341802514006, 0.5258611717229783, 0), (-0.4466779601536959, 0.6500000320658694, -0.6147997708419399, 0), (-2.2333898544311523, 3.2500002384185787, -3.0739989280700684, 0.9999999999999998) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam67"
    {
        float4[] clippingPlanes.timeSamples = {
            67: [],
        }
        float2 clippingRange.timeSamples = {
            67: (1, 1000000),
        }
        float focalLength.timeSamples = {
            67: 50,
        }
        float focusDistance.timeSamples = {
            67: 0,
        }
        float fStop.timeSamples = {
            67: 0,
        }
        float horizontalAperture.timeSamples = {
            67: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            67: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            67: "perspective",
        }
        float verticalAperture.timeSamples = {
            67: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            67: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            67: ( (-0.8090171267524003, 1.3748178262495976e-8, 0.5877850700904973, 0), (0.4408388136214947, 0.6614378206347228, 0.6067628448074107, 0), (-0.38878326742040237, 0.7500000062893257, -0.5351145312360034, 0), (-1.9439163208007815, 3.750000000000001, -2.6755726337432866, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam68"
    {
        float4[] clippingPlanes.timeSamples = {
            68: [],
        }
        float2 clippingRange.timeSamples = {
            68: (1, 1000000),
        }
        float focalLength.timeSamples = {
            68: 50,
        }
        float focusDistance.timeSamples = {
            68: 0,
        }
        float fStop.timeSamples = {
            68: 0,
        }
        float horizontalAperture.timeSamples = {
            68: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            68: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            68: "perspective",
        }
        float verticalAperture.timeSamples = {
            68: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            68: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            68: ( (-0.8090171007980185, 6.52697829117699e-9, 0.5877851058136545, 0), (0.49961734003938396, 0.5267826950102967, 0.6876645299633095, 0), (-0.3096350176390578, 0.8499999954339346, -0.4261762119287885, 0), (-1.5481750965118406, 4.249999999999999, -2.130881071090698, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam69"
    {
        float4[] clippingPlanes.timeSamples = {
            69: [],
        }
        float2 clippingRange.timeSamples = {
            69: (1, 1000000),
        }
        float focalLength.timeSamples = {
            69: 50,
        }
        float focusDistance.timeSamples = {
            69: 0,
        }
        float fStop.timeSamples = {
            69: 0,
        }
        float horizontalAperture.timeSamples = {
            69: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            69: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            69: "perspective",
        }
        float verticalAperture.timeSamples = {
            69: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            69: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            69: ( (-0.8090171540800264, -1.1325464538414213e-8, 0.5877850324772269, 0), (0.558395802764596, 0.3122497716963821, 0.7685663325507044, 0), (-0.18353575090193538, 0.9500000421450292, -0.2526154153358532, 0), (-0.9176787137985232, 4.749999999999999, -1.2630770206451416, 0.9999999999999998) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam70"
    {
        float4[] clippingPlanes.timeSamples = {
            70: [],
        }
        float2 clippingRange.timeSamples = {
            70: (1, 1000000),
        }
        float focalLength.timeSamples = {
            70: 50,
        }
        float focusDistance.timeSamples = {
            70: 0,
        }
        float fStop.timeSamples = {
            70: 0,
        }
        float horizontalAperture.timeSamples = {
            70: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            70: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            70: "perspective",
        }
        float verticalAperture.timeSamples = {
            70: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            70: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            70: ( (-0.9999999999999998, -1.1294282517973256e-17, -1.1924880679294578e-8, 0), (-5.962440791914483e-10, 0.9987492176293955, 0.050000002846700455, 0), (1.1909965248204644e-8, 0.05000000284670046, -0.9987492176293955, 0), (5.9549822850613054e-8, 0.25, -4.993745803833008, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam71"
    {
        float4[] clippingPlanes.timeSamples = {
            71: [],
        }
        float2 clippingRange.timeSamples = {
            71: (1, 1000000),
        }
        float focalLength.timeSamples = {
            71: 50,
        }
        float focusDistance.timeSamples = {
            71: 0,
        }
        float fStop.timeSamples = {
            71: 0,
        }
        float horizontalAperture.timeSamples = {
            71: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            71: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            71: "perspective",
        }
        float verticalAperture.timeSamples = {
            71: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            71: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            71: ( (-1, -1.0609951447714773e-16, -1.192488138971004e-8, 0), (-1.78873232623799e-9, 0.988685996500361, 0.15000000108029418, 0), (1.1789963224019151e-8, 0.15000000108029418, -0.9886859965003608, 0), (5.894981569554147e-8, 0.75, -4.943429946899413, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam72"
    {
        float4[] clippingPlanes.timeSamples = {
            72: [],
        }
        float2 clippingRange.timeSamples = {
            72: (1, 1000000),
        }
        float focalLength.timeSamples = {
            72: 50,
        }
        float focusDistance.timeSamples = {
            72: 0,
        }
        float fStop.timeSamples = {
            72: 0,
        }
        float horizontalAperture.timeSamples = {
            72: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            72: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            72: "perspective",
        }
        float verticalAperture.timeSamples = {
            72: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            72: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            72: ( (-0.9999999999999999, -1.0260988142311565e-17, -1.192488042136226e-8, 0), (-2.981219967471198e-9, 0.9682458397521349, 0.24999998760536618, 0), (1.1546215854960446e-8, 0.2499999876053662, -0.9682458397521349, 0), (5.7731082137024714e-8, 1.25, -4.841229438781738, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam73"
    {
        float4[] clippingPlanes.timeSamples = {
            73: [],
        }
        float2 clippingRange.timeSamples = {
            73: (1, 1000000),
        }
        float focalLength.timeSamples = {
            73: 50,
        }
        float focusDistance.timeSamples = {
            73: 0,
        }
        float fStop.timeSamples = {
            73: 0,
        }
        float horizontalAperture.timeSamples = {
            73: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            73: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            73: "perspective",
        }
        float verticalAperture.timeSamples = {
            73: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            73: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            73: ( (-1, 3.33474364976762e-17, -1.1924880676732808e-8, 0), (-4.17370865337083e-9, 0.936749685730701, 0.3500000375477591, 0), (1.1170628237977172e-8, 0.3500000375477591, -0.9367496857307009, 0), (5.585313900269285e-8, 1.7500001192092896, -4.683748245239258, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam74"
    {
        float4[] clippingPlanes.timeSamples = {
            74: [],
        }
        float2 clippingRange.timeSamples = {
            74: (1, 1000000),
        }
        float focalLength.timeSamples = {
            74: 50,
        }
        float focusDistance.timeSamples = {
            74: 0,
        }
        float fStop.timeSamples = {
            74: 0,
        }
        float horizontalAperture.timeSamples = {
            74: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            74: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            74: "perspective",
        }
        float verticalAperture.timeSamples = {
            74: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            74: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            74: ( (-0.9999999999999998, -8.667827942776774e-17, -1.1924881176875012e-8, 0), (-5.366196652980528e-9, 0.8930285530316103, 0.4500000038558534, 0), (1.0649259343453354e-8, 0.4500000038558535, -0.8930285530316103, 0), (5.324629626102253e-8, 2.25, -4.465142726898194, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam75"
    {
        float4[] clippingPlanes.timeSamples = {
            75: [],
        }
        float2 clippingRange.timeSamples = {
            75: (1, 1000000),
        }
        float focalLength.timeSamples = {
            75: 50,
        }
        float focusDistance.timeSamples = {
            75: 0,
        }
        float fStop.timeSamples = {
            75: 0,
        }
        float horizontalAperture.timeSamples = {
            75: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            75: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            75: "perspective",
        }
        float verticalAperture.timeSamples = {
            75: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            75: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            75: ( (-0.9999999999999998, -1.73704108716067e-16, -1.1924880439674025e-8, 0), (-6.5586844531190455e-9, 0.8351646507671211, 0.5500000055536657, 0), (9.959238512302773e-9, 0.5500000055536658, -0.8351646507671211, 0), (4.9796192058693116e-8, 2.75, -4.175823211669922, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam76"
    {
        float4[] clippingPlanes.timeSamples = {
            76: [],
        }
        float2 clippingRange.timeSamples = {
            76: (1, 1000000),
        }
        float focalLength.timeSamples = {
            76: 50,
        }
        float focusDistance.timeSamples = {
            76: 0,
        }
        float fStop.timeSamples = {
            76: 0,
        }
        float horizontalAperture.timeSamples = {
            76: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            76: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            76: "perspective",
        }
        float verticalAperture.timeSamples = {
            76: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            76: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            76: ( (-0.9999999999999999, -3.211071752307725e-16, -1.1924880563483994e-8, 0), (-7.751173060849269e-9, 0.7599341753608531, 0.6500000377835529, 0), (9.062124068568199e-9, 0.650000037783553, -0.7599341753608531, 0), (4.5310621032967915e-8, 3.250000238418579, -3.7996709346771245, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam77"
    {
        float4[] clippingPlanes.timeSamples = {
            77: [],
        }
        float2 clippingRange.timeSamples = {
            77: (1, 1000000),
        }
        float focalLength.timeSamples = {
            77: 50,
        }
        float focusDistance.timeSamples = {
            77: 0,
        }
        float fStop.timeSamples = {
            77: 0,
        }
        float horizontalAperture.timeSamples = {
            77: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            77: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            77: "perspective",
        }
        float verticalAperture.timeSamples = {
            77: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            77: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            77: ( (-0.9999999999999998, 3.3301776955043874e-17, -1.1924881259991409e-8, 0), (-8.943661101736806e-9, 0.6614378107675315, 0.7500000149913696, 0), (7.887567379247817e-9, 0.7500000149913697, -0.6614378107675315, 0), (3.9437836107936164e-8, 3.7499999999999996, -3.3071889877319336, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam78"
    {
        float4[] clippingPlanes.timeSamples = {
            78: [],
        }
        float2 clippingRange.timeSamples = {
            78: (1, 1000000),
        }
        float focalLength.timeSamples = {
            78: 50,
        }
        float focusDistance.timeSamples = {
            78: 0,
        }
        float fStop.timeSamples = {
            78: 0,
        }
        float horizontalAperture.timeSamples = {
            78: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            78: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            78: "perspective",
        }
        float verticalAperture.timeSamples = {
            78: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            78: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            78: ( (-0.9999999999999998, -3.9928462703681234e-16, -1.1924881414955271e-8, 0), (-1.0136149328912844e-8, 0.5267826990270846, 0.8499999929445526, 0), (6.281820877956128e-9, 0.8499999929445528, -0.5267826990270846, 0), (3.1409104650492736e-8, 4.25, -2.6339135169982915, 0.9999999999999998) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam79"
    {
        float4[] clippingPlanes.timeSamples = {
            79: [],
        }
        float2 clippingRange.timeSamples = {
            79: (1, 1000000),
        }
        float focalLength.timeSamples = {
            79: 50,
        }
        float focusDistance.timeSamples = {
            79: 0,
        }
        float fStop.timeSamples = {
            79: 0,
        }
        float horizontalAperture.timeSamples = {
            79: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            79: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            79: "perspective",
        }
        float verticalAperture.timeSamples = {
            79: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            79: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            79: ( (-0.9999999999999998, -4.689443382727299e-16, -1.1924881662423237e-8, 0), (-1.132863823532462e-8, 0.31224976990526937, 0.9500000427337391, 0), (3.7235411097420805e-9, 0.9500000427337392, -0.31224976990526937, 0), (1.861770471123237e-8, 4.750000000000001, -1.561248779296875, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam80"
    {
        float4[] clippingPlanes.timeSamples = {
            80: [],
        }
        float2 clippingRange.timeSamples = {
            80: (1, 1000000),
        }
        float focalLength.timeSamples = {
            80: 50,
        }
        float focusDistance.timeSamples = {
            80: 0,
        }
        float fStop.timeSamples = {
            80: 0,
        }
        float horizontalAperture.timeSamples = {
            80: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            80: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            80: "perspective",
        }
        float verticalAperture.timeSamples = {
            80: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            80: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            80: ( (-0.8090168576600405, -5.83698436806834e-10, -0.5877854404643531, 0), (-0.029389272578019505, 0.998749217764825, 0.0404508426548162, 0), (0.5870502488537148, 0.05000000014149828, -0.808004953763677, 0), (2.935251235961914, 0.25000000000000006, -4.040024757385255, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam81"
    {
        float4[] clippingPlanes.timeSamples = {
            81: [],
        }
        float2 clippingRange.timeSamples = {
            81: (1, 1000000),
        }
        float focalLength.timeSamples = {
            81: 50,
        }
        float focusDistance.timeSamples = {
            81: 0,
        }
        float fStop.timeSamples = {
            81: 0,
        }
        float horizontalAperture.timeSamples = {
            81: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            81: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            81: "perspective",
        }
        float verticalAperture.timeSamples = {
            81: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            81: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            81: ( (-0.8090168346353557, 5.412246109615103e-9, -0.5877854721550962, 0), (-0.08816781546194144, 0.9886859969307027, 0.1213525269197614, 0), (0.5811352661758349, 0.1499999982438078, -0.7998636152079922, 0), (2.905676364898682, 0.75, -3.9993181228637695, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam82"
    {
        float4[] clippingPlanes.timeSamples = {
            82: [],
        }
        float2 clippingRange.timeSamples = {
            82: (1, 1000000),
        }
        float focalLength.timeSamples = {
            82: 50,
        }
        float focusDistance.timeSamples = {
            82: 0,
        }
        float fStop.timeSamples = {
            82: 0,
        }
        float horizontalAperture.timeSamples = {
            82: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            82: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            82: "perspective",
        }
        float verticalAperture.timeSamples = {
            82: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            82: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            82: ( (-0.8090168180155056, 6.914776973232504e-9, -0.5877854950303435, 0), (-0.14694636248452, 0.9682458391244768, 0.20225420037839886, 0), (0.5691208612593938, 0.24999999003627466, -0.7833271668091363, 0), (2.845604419708252, 1.25, -3.9166359901428223, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam83"
    {
        float4[] clippingPlanes.timeSamples = {
            83: [],
        }
        float2 clippingRange.timeSamples = {
            83: (1, 1000000),
        }
        float focalLength.timeSamples = {
            83: 50,
        }
        float focusDistance.timeSamples = {
            83: 0,
        }
        float fStop.timeSamples = {
            83: 0,
        }
        float horizontalAperture.timeSamples = {
            83: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            83: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            83: "perspective",
        }
        float verticalAperture.timeSamples = {
            83: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            83: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            83: ( (-0.8090168298925249, 2.3951278599332333e-8, -0.587785478683039, 0), (-0.20572491347242777, 0.9367496908066311, 0.28315592303613146, 0), (0.5506078721989106, 0.35000002396240043, -0.7578462603318086, 0), (2.7530393600463863, 1.7500001192092898, -3.7892313003540044, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam84"
    {
        float4[] clippingPlanes.timeSamples = {
            84: [],
        }
        float2 clippingRange.timeSamples = {
            84: (1, 1000000),
        }
        float focalLength.timeSamples = {
            84: 50,
        }
        float focusDistance.timeSamples = {
            84: 0,
        }
        float fStop.timeSamples = {
            84: 0,
        }
        float horizontalAperture.timeSamples = {
            84: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            84: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            84: "perspective",
        }
        float verticalAperture.timeSamples = {
            84: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            84: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            84: ( (-0.8090168197371033, -5.425113497325993e-9, -0.5877854926607692, 0), (-0.26450348243475674, 0.8930285491296613, 0.3640575754180343, 0), (0.5249092237352563, 0.45000001159930136, -0.7224751181862796, 0), (2.62454605102539, 2.2499999999999996, -3.6123754978179923, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam85"
    {
        float4[] clippingPlanes.timeSamples = {
            85: [],
        }
        float2 clippingRange.timeSamples = {
            85: (1, 1000000),
        }
        float focalLength.timeSamples = {
            85: 50,
        }
        float focusDistance.timeSamples = {
            85: 0,
        }
        float fStop.timeSamples = {
            85: 0,
        }
        float horizontalAperture.timeSamples = {
            85: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            85: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            85: "perspective",
        }
        float verticalAperture.timeSamples = {
            85: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            85: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            85: ( (-0.8090168372945076, -1.0997922017530475e-9, -0.5877854684950901, 0), (-0.3232820046005751, 0.835164658698606, 0.4449592547214577, 0), (0.49089764969433936, 0.5499999935098556, -0.675662271156036, 0), (2.4544882774353027, 2.750000000000001, -3.3783113956451416, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam86"
    {
        float4[] clippingPlanes.timeSamples = {
            86: [],
        }
        float2 clippingRange.timeSamples = {
            86: (1, 1000000),
        }
        float focalLength.timeSamples = {
            86: 50,
        }
        float focusDistance.timeSamples = {
            86: 0,
        }
        float fStop.timeSamples = {
            86: 0,
        }
        float horizontalAperture.timeSamples = {
            86: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            86: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            86: "perspective",
        }
        float verticalAperture.timeSamples = {
            86: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            86: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            86: ( (-0.809016845134683, 1.5609586956344401e-9, -0.58778545770402, 0), (-0.3820605725724248, 0.7599341698080582, 0.5258609858544065, 0), (0.4466782546464013, 0.650000044275489, -0.6147995439717789, 0), (2.233391284942627, 3.25000023841858, -3.0739977359771724, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam87"
    {
        float4[] clippingPlanes.timeSamples = {
            87: [],
        }
        float2 clippingRange.timeSamples = {
            87: (1, 1000000),
        }
        float focalLength.timeSamples = {
            87: 50,
        }
        float focusDistance.timeSamples = {
            87: 0,
        }
        float fStop.timeSamples = {
            87: 0,
        }
        float horizontalAperture.timeSamples = {
            87: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            87: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            87: "perspective",
        }
        float verticalAperture.timeSamples = {
            87: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            87: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            87: ( (-0.8090168248416094, 2.8730189005621298e-8, -0.5877854856350231, 0), (-0.4408391097565583, 0.6614378067308702, 0.6067626448094027, 0), (0.38878355987907454, 0.7500000185513701, -0.5351143015662158, 0), (1.943917751312256, 3.750000000000001, -2.675571441650391, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam88"
    {
        float4[] clippingPlanes.timeSamples = {
            88: [],
        }
        float2 clippingRange.timeSamples = {
            88: (1, 1000000),
        }
        float focalLength.timeSamples = {
            88: 50,
        }
        float focusDistance.timeSamples = {
            88: 0,
        }
        float fStop.timeSamples = {
            88: 0,
        }
        float horizontalAperture.timeSamples = {
            88: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            88: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            88: "perspective",
        }
        float verticalAperture.timeSamples = {
            88: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            88: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            88: ( (-0.8090168540111851, 1.3728008341207246e-8, -0.5877854454865695, 0), (-0.499617621081827, 0.5267826923950913, 0.6876643277773792, 0), (0.30963520896432484, 0.8499999970546934, -0.4261760696902637, 0), (1.548176050186158, 4.250000000000001, -2.1308803558349614, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam89"
    {
        float4[] clippingPlanes.timeSamples = {
            89: [],
        }
        float2 clippingRange.timeSamples = {
            89: (1, 1000000),
        }
        float focalLength.timeSamples = {
            89: 50,
        }
        float focusDistance.timeSamples = {
            89: 0,
        }
        float fStop.timeSamples = {
            89: 0,
        }
        float horizontalAperture.timeSamples = {
            89: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            89: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            89: "perspective",
        }
        float verticalAperture.timeSamples = {
            89: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            89: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            89: ( (-0.8090168037295087, -1.3911283069933937e-8, -0.5877855146933186, 0), (-0.5583962672585995, 0.3122497716264736, 0.7685659951044397, 0), (0.18353588203659887, 0.9500000421680068, -0.25261531997452724, 0), (0.9176793694496157, 4.750000000000002, -1.2630765438079836, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam90"
    {
        float4[] clippingPlanes.timeSamples = {
            90: [],
        }
        float2 clippingRange.timeSamples = {
            90: (1, 1000000),
        }
        float focalLength.timeSamples = {
            90: 50,
        }
        float focusDistance.timeSamples = {
            90: 0,
        }
        float fStop.timeSamples = {
            90: 0,
        }
        float horizontalAperture.timeSamples = {
            90: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            90: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            90: "perspective",
        }
        float verticalAperture.timeSamples = {
            90: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            90: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            90: ( (-0.30901651778044, 1.3853451372169978e-10, -0.9510566711499642, 0), (-0.04755283594018641, 0.9987492176442361, 0.015450826808684596, 0), (0.9498671062484986, 0.05000000255026244, -0.30863000536577273, 0), (4.749335289001465, 0.25, -1.5431499481201167, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam91"
    {
        float4[] clippingPlanes.timeSamples = {
            91: [],
        }
        float2 clippingRange.timeSamples = {
            91: (1, 1000000),
        }
        float focalLength.timeSamples = {
            91: 50,
        }
        float focusDistance.timeSamples = {
            91: 0,
        }
        float fStop.timeSamples = {
            91: 0,
        }
        float horizontalAperture.timeSamples = {
            91: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            91: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            91: "perspective",
        }
        float verticalAperture.timeSamples = {
            91: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            91: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            91: ( (-0.30901652527093876, 2.988109482071621e-10, -0.9510566687161576, 0), (-0.1426585071236515, 0.9886859955623428, 0.04635248131599743, 0), (0.9402964093596903, 0.1500000072629959, -0.3055203108900861, 0), (4.701481819152832, 0.7500000000000001, -1.5276014804840092, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam92"
    {
        float4[] clippingPlanes.timeSamples = {
            92: [],
        }
        float2 clippingRange.timeSamples = {
            92: (1, 1000000),
        }
        float focalLength.timeSamples = {
            92: 50,
        }
        float focusDistance.timeSamples = {
            92: 0,
        }
        float fStop.timeSamples = {
            92: 0,
        }
        float horizontalAperture.timeSamples = {
            92: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            92: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            92: "perspective",
        }
        float verticalAperture.timeSamples = {
            92: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            92: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            92: ( (-0.3090164836325804, 4.859986746374999e-9, -0.9510566822452566, 0), (-0.23776417073367112, 0.9682458361102859, 0.07725412591197207, 0), (0.9208566728642871, 0.25000000171018627, -0.2992039224111576, 0), (4.604283332824706, 1.25, -1.4960196018218994, 0.9999999999999998) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam93"
    {
        float4[] clippingPlanes.timeSamples = {
            93: [],
        }
        float2 clippingRange.timeSamples = {
            93: (1, 1000000),
        }
        float focalLength.timeSamples = {
            93: 50,
        }
        float focusDistance.timeSamples = {
            93: 0,
        }
        float fStop.timeSamples = {
            93: 0,
        }
        float horizontalAperture.timeSamples = {
            93: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            93: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            93: "perspective",
        }
        float verticalAperture.timeSamples = {
            93: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            93: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            93: ( (-0.30901651645786565, 1.171623242868236e-9, -0.9510566715796938, 0), (-0.33286985765836596, 0.9367496907457286, 0.1081557892592021, 0), (0.890902043110658, 0.3500000241254017, -0.28947112583723, 0), (4.454510211944579, 1.7500001192092893, -1.4473556280136108, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam94"
    {
        float4[] clippingPlanes.timeSamples = {
            94: [],
        }
        float2 clippingRange.timeSamples = {
            94: (1, 1000000),
        }
        float focalLength.timeSamples = {
            94: 50,
        }
        float focusDistance.timeSamples = {
            94: 0,
        }
        float fStop.timeSamples = {
            94: 0,
        }
        float horizontalAperture.timeSamples = {
            94: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            94: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            94: "perspective",
        }
        float verticalAperture.timeSamples = {
            94: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            94: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            94: ( (-0.30901649981571333, 2.5774602036010567e-9, -0.9510566769870477, 0), (-0.4279754947524322, 0.8930285598387192, 0.13905742412325386, 0), (0.849320774933156, 0.44999999034709276, -0.2759605586937385, 0), (4.246603965759278, 2.2500000000000004, -1.3798028230667116, 1.0000000000000002) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam95"
    {
        float4[] clippingPlanes.timeSamples = {
            95: [],
        }
        float2 clippingRange.timeSamples = {
            95: (1, 1000000),
        }
        float focalLength.timeSamples = {
            95: 50,
        }
        float focusDistance.timeSamples = {
            95: 0,
        }
        float fStop.timeSamples = {
            95: 0,
        }
        float horizontalAperture.timeSamples = {
            95: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            95: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            95: "perspective",
        }
        float verticalAperture.timeSamples = {
            95: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            95: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            95: ( (-0.30901647948046723, -1.4507738538283025e-8, -0.9510566835943577, 0), (-0.5230811809476135, 0.8351646535751769, 0.1699590525894553, 0), (0.7942889232187166, 0.5500000012896863, -0.25807964862305016, 0), (3.9714446067810054, 2.75, -1.2903982400894163, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam96"
    {
        float4[] clippingPlanes.timeSamples = {
            96: [],
        }
        float2 clippingRange.timeSamples = {
            96: (1, 1000000),
        }
        float focalLength.timeSamples = {
            96: 50,
        }
        float focusDistance.timeSamples = {
            96: 0,
        }
        float fStop.timeSamples = {
            96: 0,
        }
        float horizontalAperture.timeSamples = {
            96: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            96: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            96: "perspective",
        }
        float verticalAperture.timeSamples = {
            96: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            96: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            96: ( (-0.30901649577616114, 2.427328060772282e-10, -0.9510566782995752, 0), (-0.6181868887058867, 0.7599341646280762, 0.20086073798321916, 0), (0.7227404623862963, 0.6500000503315579, -0.23483219242389824, 0), (3.6137022972106934, 3.250000238418579, -1.1741609573364262, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam97"
    {
        float4[] clippingPlanes.timeSamples = {
            97: [],
        }
        float2 clippingRange.timeSamples = {
            97: (1, 1000000),
        }
        float focalLength.timeSamples = {
            97: 50,
        }
        float focusDistance.timeSamples = {
            97: 0,
        }
        float fStop.timeSamples = {
            97: 0,
        }
        float horizontalAperture.timeSamples = {
            97: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            97: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            97: "perspective",
        }
        float verticalAperture.timeSamples = {
            97: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            97: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            97: ( (-0.30901650716351803, 4.541966608373473e-9, -0.9510566745996054, 0), (-0.7132925129305723, 0.6614378183364075, 0.2317623857996884, 0), (0.6290648530140985, 0.7500000083162494, -0.20439520108842332, 0), (3.145324230194093, 3.750000000000001, -1.021975994110108, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam98"
    {
        float4[] clippingPlanes.timeSamples = {
            98: [],
        }
        float2 clippingRange.timeSamples = {
            98: (1, 1000000),
        }
        float focalLength.timeSamples = {
            98: 50,
        }
        float focusDistance.timeSamples = {
            98: 0,
        }
        float fStop.timeSamples = {
            98: 0,
        }
        float horizontalAperture.timeSamples = {
            98: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            98: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            98: "perspective",
        }
        float verticalAperture.timeSamples = {
            98: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            98: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            98: ( (-0.3090165480302414, 1.0300355929304667e-8, -0.9510566613212237, 0), (-0.8083981698124002, 0.5267826717520553, 0.26266407402941044, 0), (0.5010001717439175, 0.8500000098480976, -0.16278455446017906, 0), (2.505000829696655, 4.25, -0.8139227628707886, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "MyCam99"
    {
        float4[] clippingPlanes.timeSamples = {
            99: [],
        }
        float2 clippingRange.timeSamples = {
            99: (1, 1000000),
        }
        float focalLength.timeSamples = {
            99: 50,
        }
        float focusDistance.timeSamples = {
            99: 0,
        }
        float fStop.timeSamples = {
            99: 0,
        }
        float horizontalAperture.timeSamples = {
            99: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            99: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            99: "perspective",
        }
        float verticalAperture.timeSamples = {
            99: 15.2908,
        }
        float verticalApertureOffset.timeSamples = {
            99: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            99: ( (-0.3090164629597319, -7.991745695767884e-9, -0.95105668896226, 0), (-0.9035038948252939, 0.3122497734311748, 0.2935656502857658, 0), (0.29696723330256686, 0.9500000415748308, -0.09649032776625266, 0), (1.4848361015319822, 4.75, -0.482451617717743, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

